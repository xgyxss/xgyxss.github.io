<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜行书生</title>
  
  <subtitle>与其心生羡慕，不如自己变得优秀。</subtitle>
  <link href="https://yexingshusheng.com/atom.xml" rel="self"/>
  
  <link href="https://yexingshusheng.com/"/>
  <updated>2022-06-12T14:18:35.195Z</updated>
  <id>https://yexingshusheng.com/</id>
  
  <author>
    <name>夜行书生</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你有备案的域名过期后却忘记注销的吗?</title>
    <link href="https://yexingshusheng.com/2022/06/ni-you-bei-an-de-yu-ming-guo-qi-hou-que-wang-ji-zhu-xiao-de-ma.html"/>
    <id>https://yexingshusheng.com/2022/06/ni-you-bei-an-de-yu-ming-guo-qi-hou-que-wang-ji-zhu-xiao-de-ma.html</id>
    <published>2022-06-12T12:14:21.000Z</published>
    <updated>2022-06-12T14:18:35.195Z</updated>
    
    <content type="html"><![CDATA[<p>那可能很危险…</p><span id="more"></span><p>在注册域名并且公安备案、ICP备案后，过几年域名到期了，这个时候会有专门的流氓公司打你的主意。</p><p>他们会抢注这个域名，利用这个域名建立一个盗版电影网站，放一些热门盗版电影（不涉黄），此后他们的另一个公司（拥有电影版权的公司）对网站进行取证。</p><p>随后是去法院告你盗版要求赔偿，在公安那里这个域名的所有人还是你（或贵司）从法律流程上来说完美无缺，你一定会输掉官司，这个时候流氓公司就等着你和解（自然不会少要和解费）。</p><p>他们有专门的团队把整个过程流程化、低成本化。</p><p>如果你们有废弃的域名记得注销备案，如果是大厂更要记得这事，大厂赔得更多。</p><blockquote><p>rf.</p><p><a href="http://www.64365.com/zs/865383.aspx">域名备案号注销如何操作？</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;那可能很危险…&lt;/p&gt;</summary>
    
    
    
    <category term="转录归档" scheme="https://yexingshusheng.com/categories/%E8%BD%AC%E5%BD%95%E5%BD%92%E6%A1%A3/"/>
    
    
    <category term="202206" scheme="https://yexingshusheng.com/tags/202206/"/>
    
    <category term="域名" scheme="https://yexingshusheng.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="备案" scheme="https://yexingshusheng.com/tags/%E5%A4%87%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>program</title>
    <link href="https://yexingshusheng.com/2022/06/program.html"/>
    <id>https://yexingshusheng.com/2022/06/program.html</id>
    <published>2022-06-12T09:27:46.000Z</published>
    <updated>2022-06-12T10:06:35.283Z</updated>
    
    <content type="html"><![CDATA[<p>部分互联网事件梳理…</p><more><h3 id="2022-06-16"><a href="#2022-06-16" class="headerlink" title="2022-06-16"></a>2022-06-16</h3><p>IE浏览器正式退役。</p><h3 id="2022-05-19"><a href="#2022-05-19" class="headerlink" title="2022-05-19"></a>2022-05-19</h3><p>Gitee 即日起执行开源仓库审核后上线的措施，所有新上线的开源仓库需要进行人工审核后可正式公开。</p><blockquote><p>rf. </p><p>什么是开源？：<a href="https://www.redhat.com/zh/topics/open-source/what-is-open-source">https://www.redhat.com/zh/topics/open-source/what-is-open-source</a></p><p>这个措施与开源里的一些价值理念背道而驰。</p><p>so？弃！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;部分互联网事件梳理…&lt;/p&gt;
&lt;more&gt;

&lt;h3 id=&quot;2022-06-16&quot;&gt;&lt;a href=&quot;#2022-06-16&quot; class=&quot;headerlink&quot; title=&quot;2022-06-16&quot;&gt;&lt;/a&gt;2022-06-16&lt;/h3&gt;&lt;p&gt;IE浏览器正式退役。&lt;/</summary>
      
    
    
    
    <category term="日志随笔" scheme="https://yexingshusheng.com/categories/%E6%97%A5%E5%BF%97%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="202206" scheme="https://yexingshusheng.com/tags/202206/"/>
    
    <category term="program" scheme="https://yexingshusheng.com/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>最高级的教养，是懂得欣赏别人</title>
    <link href="https://yexingshusheng.com/2022/06/zui-gao-ji-de-jiao-yang-shi-dong-de-xin-shang-bie-ren.html"/>
    <id>https://yexingshusheng.com/2022/06/zui-gao-ji-de-jiao-yang-shi-dong-de-xin-shang-bie-ren.html</id>
    <published>2022-06-11T06:08:50.000Z</published>
    <updated>2022-06-10T06:16:22.587Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>rf.</p><p><a href="https://www.aboluowang.com/2022/0607/1758638.html">最高级的教养，是懂得欣赏别人</a></p></blockquote><p>「小胜靠智，大胜靠德！」</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;rf.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.aboluowang.com/2022/0607/1758638.html&quot;&gt;最高级的教养，是懂得欣赏别人&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「小胜靠智，大胜靠德！」&lt;</summary>
      
    
    
    
    <category term="归档转录" scheme="https://yexingshusheng.com/categories/%E5%BD%92%E6%A1%A3%E8%BD%AC%E5%BD%95/"/>
    
    
    <category term="202206" scheme="https://yexingshusheng.com/tags/202206/"/>
    
  </entry>
  
  <entry>
    <title>以史为鉴，以史明志</title>
    <link href="https://yexingshusheng.com/2022/06/yi-shi-wei-jian-yi-shi-ming-zhi.html"/>
    <id>https://yexingshusheng.com/2022/06/yi-shi-wei-jian-yi-shi-ming-zhi.html</id>
    <published>2022-06-05T12:31:58.000Z</published>
    <updated>2022-06-05T15:53:22.199Z</updated>
    
    <content type="html"><![CDATA[<p>仅从今天开始，记录时下发生的、容易被遗忘（词条消失）的社会事件。</p><p>以史为鉴，以史明志，映照现实、远观未来。</p><span id="more"></span><h3 id="2022-06-05-郑州女生求救120未果，脑出血去世"><a href="#2022-06-05-郑州女生求救120未果，脑出血去世" class="headerlink" title="2022-06-05 郑州女生求救120未果，脑出血去世"></a>2022-06-05 郑州女生求救120未果，脑出血去世</h3><p>摘自河南大学脑出血死亡女孩的父亲的微博（<a href="https://weibo.com/u/7528222384">玖君gg</a>）：</p><blockquote><p>我的孩子叫彭新君，就读于河南大学郑州龙子湖校区，今年21岁，大三准在校学生，2022年5月17号上午10点27分拨打郑州市120急救中心电话，期间通话时长8分钟左右，意识清晰，且表达清楚，准确的告知了120自己头疼不舒服，和自己所在位置，最后是室友回寝室后发现孩子没有意识，深度昏迷才打的急救电话，120才到。迟到了近两个半小时才派出救护车，到医院抢救时已经没有呼吸，瞳孔放大，最终孩子离开了这个世界。120接线员在得知是河南大学郑州校区后依旧不断询问地址，导致我女儿在意识不清醒状态下被诱导说出不准确地址。并在收到求救电话后未安排救援车辆，直到再次接到我女儿室友的电话后才来救援。此时，距我女儿求救已过去两个半小时。她才21岁啊，她的人生才刚刚开始，她明明可以活下，却错过了宝贵的救治时间。下面是孩子求救电话的录音，希望更多人能看到这条消息，不要让悲剧再次重演。</p></blockquote><h3 id="2022-06-04-徐州丰县公安局孙楼派出所所长被评为优秀人民警察"><a href="#2022-06-04-徐州丰县公安局孙楼派出所所长被评为优秀人民警察" class="headerlink" title="2022-06-04 徐州丰县公安局孙楼派出所所长被评为优秀人民警察"></a>2022-06-04 徐州丰县公安局孙楼派出所所长被评为优秀人民警察</h3><p>徐州丰县？还记得铁链女事件吗？</p><p><a href="https://zh.m.wikipedia.org/zh-hans/%E5%BE%90%E5%B7%9E%E5%85%AB%E5%AD%A9%E6%AF%8D%E8%A6%AA%E4%BA%8B%E4%BB%B6">徐州八孩母亲事件</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;仅从今天开始，记录时下发生的、容易被遗忘（词条消失）的社会事件。&lt;/p&gt;
&lt;p&gt;以史为鉴，以史明志，映照现实、远观未来。&lt;/p&gt;</summary>
    
    
    
    <category term="转录归档" scheme="https://yexingshusheng.com/categories/%E8%BD%AC%E5%BD%95%E5%BD%92%E6%A1%A3/"/>
    
    
    <category term="history" scheme="https://yexingshusheng.com/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>关于新冠疫情的阶段性总结一</title>
    <link href="https://yexingshusheng.com/2022/06/guan-yu-xin-guan-yi-qing-de-jie-duan-xing-zong-jie-yi.html"/>
    <id>https://yexingshusheng.com/2022/06/guan-yu-xin-guan-yi-qing-de-jie-duan-xing-zong-jie-yi.html</id>
    <published>2022-06-03T11:02:02.000Z</published>
    <updated>2022-06-06T02:23:47.206Z</updated>
    
    <content type="html"><![CDATA[<p>从19年11月初，到现在22年6月初，疫情的第一阶段终于算是告一段落，至于为什么将当前节点作为第一阶段？</p><p>全文各段点到即止，续推理自己探索…</p><span id="more"></span><h2 id="矛盾的产生"><a href="#矛盾的产生" class="headerlink" title="矛盾的产生"></a>矛盾的产生</h2><p>国内疫情的导火索从武汉开始，弥散至全国。（从武汉首个报道，并非起源，此前美国已有报道不明电子烟肺炎）</p><p>由点到面，“清零”政策，再由面到点。</p><p>逐个城市的相继发生，最终在长三角和珠三角两大经济重区，定格到了长三角。</p><p>为什么谈论到这点？</p><p>还记得一个中心，两个基本点吗？详见<a href="https://baike.baidu.com/item/%E4%B8%80%E4%B8%AA%E4%B8%AD%E5%BF%83%E3%80%81%E4%B8%A4%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%82%B9/10749314">百度词条</a>。</p><p>很明显，“清零”政策和“以经济建设为中心”势必会发生矛盾。</p><h2 id="转折点"><a href="#转折点" class="headerlink" title="转折点"></a>转折点</h2><p>上海从4·1到6·1，在长达两个多月的封锁后，终于解封。</p><p>不对，在5月29号的上海市疫情防控新闻发布例会上，有官员明确否认“封城”之说，“上海从未宣布过‘封城’，因此也不存在‘解封’，不能使用‘解封’的提法。”</p><p>市有关部门负责人还指出，1，居委是城镇居民自治组织，居委的行为是居民自管自治的结果，不是政府指令；2，正式的规则和条令，以市委、市政府发布的为准，居委发布的信息只代表本居委和小区自己的行动共识，政府不对其合法性负责；3，未来居委再提到“上级有关部门要求”，除了有正式盖章文件的，原则上都是口谕，政府不承认。</p><p>🤔，按照这个逻辑，也就是说，上海市民自发自愿完成了一桩自开埠以来从未有过的封城义举？也就是说，让一个繁华的超级大都市突然之间彻底静止，不是政府行为，而是市民做恶？厉害了👍，当时住在上海的全体市民竟自发完成了前所未有的壮举！</p><p>5月29日下午，上海由常务副市长公布一份《上海市加快经济恢复和重振行动方案》，承认本轮疫情对上海经济社会发展产生了巨大的冲击，市场主体遭遇的困境前所未有，当务之急要全力保企业、保就业，努力稳住经济基本盘。</p><p>但，通篇只字不提封城对上海经济造成的损失，为防控付出的惨痛代价，更没有总结上海封城的经验教训以及世人所期待的问责追责！</p><p>与此同时，数十位企业家发表公开信表示“<a href="https://www.rfa.org/mandarin/yataibaodao/jingmao/jt-06012022124934.html">躺平、复工不复产</a>”。</p><p>第二阶段恐才拉开序幕…</p><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>今天是2022年的端午节，本应该吃着粽子、和亲友洽谈，抑或是去游玩，我觉得更重要的事：总结一份自己视角的对于疫情的浅薄感悟。</p><blockquote><p>为什么写总结？</p><p>对于大多数人来说，多积累工作经验，平日里多思考多总结，坚持下去，就可以超过很多比自己聪明的人。先天硬件改不了，后天优化软件，一样可以变得更聪明。</p></blockquote><p>有时想想其实和荒岛独居、荒岛求生系列很像。</p><p>夸张？搞笑？我是认真的。</p><p>封控，暴露了太多的问题！</p><p>比如，有问题的猪肉等等，对标荒岛求生系列里的不洁食物和慢性毒，加上根本没机会用药。</p><p>没记错的话，无一例外的，这种情况下的荒岛求生系列里都是淘汰。</p><p>精神崩溃，放弃的——淘汰。</p><p>…</p><p>但这毕竟是极度求生的游戏，有节目组的外挂作为免死金牌。</p><p>回到现实，被报道出的部分是，</p><p>极度饥饿，跟小区闹，被打被抓，后续不得而知；</p><p>精神崩溃——跳楼；</p><p>…</p><p>唯有活着才有机会，这不是开玩笑。</p><blockquote><p>这也可以管中窥豹——年轻人的各种恐慌了：不谈恋爱，谈恋爱不结婚，结婚不生孩，生孩不到三胎…</p><p>当生存都受到威胁，也难免只想到独善其身了。</p></blockquote><h3 id="储粮"><a href="#储粮" class="headerlink" title="储粮"></a>储粮</h3><p>正所谓有备无患，事发地的疫情期间，可能会伴随物价的指数级上涨，也可能只是极少数地区，但谁又能知道，这种事会不会发生在自己头上呢？</p><blockquote><p>为什么祁老太爷只预备三个月的粮食与咸菜呢？这是因为在他的心理上，他总以为北平是天底下最可靠的大城，不管有什么灾难，到三个月必定灾消难满，而后诸事大吉。</p><p>——出自老舍的文集《四世同堂》</p></blockquote><p>这次上海疫情的封控时长，也反证了祁老太爷对于历史总结独到眼光的正确性。</p><p>结合以上二者，以及小道消息（部分地区当地人发视频自述已长达100多天的封控，没有热搜，没有媒体发声），可以推断出，储粮可以适度控制在3～6个月。</p><p>为此，整理了一些文章，应急参考用：</p><p>居家隔离，收好这份食物采购指南：<a href="http://digitalpaper.stdaily.com/http_www.kjrb.com/kjwzb/html/2022-04/15/content_533712.htm?div=-1">http://digitalpaper.stdaily.com/http_www.kjrb.com/kjwzb/html/2022-04/15/content_533712.htm?div=-1</a></p><p>疫情储备食品的要点：史上最全浓缩版：<a href="https://www.toutiao.com/article/7085356083916702241/?wid=1654450053642">https://www.toutiao.com/article/7085356083916702241/?wid=1654450053642</a></p><p>储备物资如何放更久？看这里：<a href="https://www.huadu.gov.cn/qlyfdyyqfkyz/yqfkzccszy/content/post_8178400.html">https://www.huadu.gov.cn/qlyfdyyqfkyz/yqfkzccszy/content/post_8178400.html</a></p><p>食物营养专家给出新冠肺炎防控期间食材选购和饮食搭配建议， 特殊时期食物多样化的理念可以松一松：<a href="http://www.farmer.com.cn/2020/02/15/99848519.html">http://www.farmer.com.cn/2020/02/15/99848519.html</a></p><p>家庭应急食物储备指南：危急情况下，你需要这些食品物资！：<a href="https://zhuanlan.zhihu.com/p/392089777">https://zhuanlan.zhihu.com/p/392089777</a></p><p>不同冷冻食品的存储时长：<a href="https://weibo.com/1774057271/LrgNWiZXT">https://weibo.com/1774057271/LrgNWiZXT</a></p><h3 id="做饭"><a href="#做饭" class="headerlink" title="做饭"></a>做饭</h3><blockquote><p>程序员做饭指南的GitHub项目地址：<a href="https://github.com/Anduin2017/HowToCook">https://github.com/Anduin2017/HowToCook</a></p></blockquote><p>主要靠平时多积累，另附上程序员做饭指南：<a href="https://cook.aiurs.co/">https://cook.aiurs.co/</a></p><h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><p>扩大发声平台，不单单发朋友圈，上海疫情期间，可能部分人还不知道，vx连夜加班修改区域算法的事，外地人都看不到那边的朋友圈。有机会，适当加一些大群，帮忙转发消息。极端必要情况下，集资买热搜，不是散播舆论，只是陈述事实，引起关注，先生存再发展。若是真的等到有人跳楼、小区铁门焊死发生火灾的时候，一切都晚了！</p><h3 id="心理"><a href="#心理" class="headerlink" title="心理"></a>心理</h3><p>疫情带来的线上娱乐多样性，无非是「奶头乐」的衍生物罢了，从本质上来说，并不能解决封控期间带来的焦虑。</p><blockquote><p>奶头乐，<a href="https://baike.baidu.com/item/%E5%A5%B6%E5%A4%B4%E4%B9%90%E7%90%86%E8%AE%BA/24573214">百度词条</a>，<a href="https://zh.wikipedia.org/zh-sg/%E5%A5%B6%E5%A4%B4%E4%B9%90">维基词条</a>。</p></blockquote><p>长期的短视频刺激也只会愈发地丧失独立思考和逻辑推理的能力，稍长的文章都会不安定地读不下来。思想建设的最后一根稻草也可能在此期间被时代的一粒灰压垮。</p><p>疫情击垮的人太多，大致分为两个方面，一方面来自于经济，一方面来自于抗压能力，而且学历、背景跨度比较大，可以说疫情带来的精神攻击，无视学历、背景。</p><p>我也时常反思自己的反脆弱能力，以及对于疫情或者未来重大事情反扑的及时应变，如果不时常思考，只是行将就木地活着，那跟丧尸有什么区别。</p><p>第二阶段，才正式拉开序幕，你，准备好了吗？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从19年11月初，到现在22年6月初，疫情的第一阶段终于算是告一段落，至于为什么将当前节点作为第一阶段？&lt;/p&gt;
&lt;p&gt;全文各段点到即止，续推理自己探索…&lt;/p&gt;</summary>
    
    
    
    <category term="日志随笔" scheme="https://yexingshusheng.com/categories/%E6%97%A5%E5%BF%97%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="202206" scheme="https://yexingshusheng.com/tags/202206/"/>
    
    <category term="新冠" scheme="https://yexingshusheng.com/tags/%E6%96%B0%E5%86%A0/"/>
    
    <category term="总结" scheme="https://yexingshusheng.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>渐变壁纸素材</title>
    <link href="https://yexingshusheng.com/2022/06/jian-bian-bi-zhi-su-cai.html"/>
    <id>https://yexingshusheng.com/2022/06/jian-bian-bi-zhi-su-cai.html</id>
    <published>2022-06-02T04:16:39.000Z</published>
    <updated>2022-06-06T03:04:10.050Z</updated>
    
    <content type="html"><![CDATA[<p>还记得在折腾iTerm2+ohmyzsh打造最强装x终端时，一直未能找到心仪的壁纸，最终的几个壁纸方案是：纯色护眼壁纸、自绘渐变色壁纸、毛玻璃壁纸。终于让我找到了心仪的渐变色壁纸方案…</p><span id="more"></span><h3 id="MESH·Y——一键生成随机渐变壁纸"><a href="#MESH·Y——一键生成随机渐变壁纸" class="headerlink" title="MESH·Y——一键生成随机渐变壁纸"></a><a href="https://meshgradient.in/">MESH·Y——一键生成随机渐变壁纸</a></h3><p>特点：</p><ul><li>可自选 4 种基色</li><li>根据基色随机生成渐变壁纸</li><li>支持导出为 PNG，可自定义长宽</li><li>提供部分预设壁纸</li></ul><p>MESH·Y 需要用户先提供四种基色，而非全部自动生成。它自动生成的每张壁纸也有着它们唯一的 Mesh Id，用户不需要担心挑选的过程中无法再现心仪的壁纸。</p><h3 id="100-Mesh-Gradients"><a href="#100-Mesh-Gradients" class="headerlink" title="100 Mesh Gradients"></a><a href="https://www.meshgradients.design/">100 Mesh Gradients</a></h3><ul><li>提供 100 款免费渐变素材</li><li>支持单独选取或全部素材打包下载</li></ul><h3 id="Raycast"><a href="#Raycast" class="headerlink" title="Raycast"></a><a href="https://t.me/NewlearnerChannel/5921">Raycast</a></h3><p>一款 macOS 启动器软件。这篇<a href="https://raycast.com/blog/making-a-raycast-wallpaper/">博客</a>分享了他们制作这样一张壁纸的方法。Raycast 使用的图片制作工具是 Figma，当你有一些配色方面的灵感后，即可开始创作</p><p>💡 步骤：</p><p>① 新建文档并指定图片分辨率</p><p>② 新建一个同分辨率的矩形图层</p><p>③ 将填充方式指定为按角度</p><p>④ 添加不同的颜色</p><p>⑤ 调整渐变色的角度和位置</p><p>⑥ 添加新图层，制造模糊效果</p><p>虽然这种渐变壁纸不是很难做，但对于没有接触过设计的朋友，接触 Figma 并作出成品还是很有成就感。大家也可以在 <a href="https://raycast.com/wallpapers">这里</a> 下载到 Raycast 的 5K 成品壁纸。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;还记得在折腾iTerm2+ohmyzsh打造最强装x终端时，一直未能找到心仪的壁纸，最终的几个壁纸方案是：纯色护眼壁纸、自绘渐变色壁纸、毛玻璃壁纸。终于让我找到了心仪的渐变色壁纸方案…&lt;/p&gt;</summary>
    
    
    
    <category term="工具网站" scheme="https://yexingshusheng.com/categories/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="202206" scheme="https://yexingshusheng.com/tags/202206/"/>
    
    <category term="tools" scheme="https://yexingshusheng.com/tags/tools/"/>
    
    <category term="壁纸" scheme="https://yexingshusheng.com/tags/%E5%A3%81%E7%BA%B8/"/>
    
    <category term="素材" scheme="https://yexingshusheng.com/tags/%E7%B4%A0%E6%9D%90/"/>
    
    <category term="渐变" scheme="https://yexingshusheng.com/tags/%E6%B8%90%E5%8F%98/"/>
    
  </entry>
  
  <entry>
    <title>AI工具Upscale.media——提升4倍分辨率</title>
    <link href="https://yexingshusheng.com/2022/06/ai-gong-ju-upscale-media-ti-sheng-4-bei-fen-bian-lu.html"/>
    <id>https://yexingshusheng.com/2022/06/ai-gong-ju-upscale-media-ti-sheng-4-bei-fen-bian-lu.html</id>
    <published>2022-06-01T11:04:28.000Z</published>
    <updated>2022-06-01T01:07:40.333Z</updated>
    
    <content type="html"><![CDATA[<p>官网网址：<a href="https://www.upscale.media/">https://www.upscale.media/</a></p><p>免费的AI工具Upscale.media，它使用AI技术可以将图片分辨率提升至原始尺寸的4倍，而且不会降低图片清晰度和质量，没有像素化或者模糊的细节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官网网址：&lt;a href=&quot;https://www.upscale.media/&quot;&gt;https://www.upscale.media/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;免费的AI工具Upscale.media，它使用AI技术可以将图片分辨率提升至原始尺寸的4倍，而且不会降低图片清晰</summary>
      
    
    
    
    <category term="工具网站" scheme="https://yexingshusheng.com/categories/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="202206" scheme="https://yexingshusheng.com/tags/202206/"/>
    
    <category term="tools" scheme="https://yexingshusheng.com/tags/tools/"/>
    
    <category term="Upscale.media" scheme="https://yexingshusheng.com/tags/Upscale-media/"/>
    
  </entry>
  
  <entry>
    <title>我们到底走出了什么?</title>
    <link href="https://yexingshusheng.com/2022/06/wo-men-dao-di-zou-chu-liao-shi-me.html"/>
    <id>https://yexingshusheng.com/2022/06/wo-men-dao-di-zou-chu-liao-shi-me.html</id>
    <published>2022-06-01T10:42:31.000Z</published>
    <updated>2022-06-06T02:37:21.287Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>rf.</p><p>微信公众号｜哥轮布碎碎报</p><p>作者：连清川</p><p><strong>声明：转录归档的文章并不代表博主的立场或观点。</strong></p></blockquote><span id="more"></span><p>六月不是一个适合忘却的时间</p><p>凌晨一点钟，我们扫了场所码，走出小区。</p><p>或许因为是郊区，并没有一派欢腾的样子，行人稀落，却已经有人坐在饭店的门口吃饭了。</p><p>一家河南烩面店孤独地开着，在四周的暗夜之中，对面的隔离带，依旧十分碍眼。</p><p>一对情侣在黑暗中激烈地拥吻，大约他们在这两个月时间里，被分别隔离了。</p><p>没有欢乐，没有激动，甚至心中毫无波澜。</p><p><img src="https://chinadigitaltimes.net/chinese/files/2022/06/Screen-Shot-2022-06-01-at-10.23.07-AM.png" alt="img"></p><p>平静得就像解到的通知，没有居委会激情洋溢的告知，没有新闻煤体大张旗鼓的庆贺，也没有宣布胜利的号角。</p><p>我们就这么莫名其妙地走出了囚笼，就如同我们当时莫名其妙地走进去。</p><p>我们到底战胜了什么？我们到底斗争了什么？我们到底抗击了什么？</p><p>没有人even bother给我们一个解释。</p><p>所以，我们，2500万人，上海，在这60天里，70天里，80天里，那么多的牺牲、血泪和悲伤，到底是什么？</p><p>是谁那么大的权力，是谁可以那么任性，是谁在21世纪的现代世界中，竟然可以如此对于这么庞大的人口与城市，予取予夺，生杀无忌？</p><p>就如同在朋友圈里流传的那样，没有“解封”的字样出现，自然也就没有“封城”这么一回事。所以，在过去的两个多月时间里，整个上海就如同草芥一般，随意遗弃；而如今，就如同草芥一般，随意捡起。</p><p>有什么理由欢乐，有什么理由庆祝。难道在这个时刻，我们不应该泪流满面吗？</p><p>延安高架上已经堵车了，外滩上的人们开始跳起舞来，人们在北蔡的街边摊上开始纵情饮酒。我当然并不是责备他们如此冷漠，谁人心责备那些被无辜套上枷锁的人，享受此刻久违了的“生活”？</p><p>对，这原本只是我们的生活而已，而6月1日，这个原本属于孩子们的节日，我们却燃放烟花，纵情歌舞，纵车狂奔，去庆祝一个原本就不应该庆祝的日子。</p><p>我担心的不是纵情，而是忘却，一切回归如常，什么都抵不过生活，什么都抵不过时间，什么都抵不过遗忘。</p><p>我们可能会以为一场灾难就此过去，当我们重新收拾心情蹒跚迈进明天的时候，我们的忘却，会让另外一场灾难随时在等待我们。</p><p>难道不是吗？难道我们见过的灾难还不够多吗？</p><p>伍迪·艾伦在1989年的电影《罪与错》中，曾经说起，遗忘是人类共所建立的一种疗愈机制。因为当一种痛苦过于强大的时候，人们为了能够让目己生存下去，就故意遗忘了伤痛，以便让生活继续。</p><p>只是我很怀疑，遗忘真的能够让我们更加幸福吗？</p><p><img src="https://chinadigitaltimes.net/chinese/files/2022/06/Screen-Shot-2022-06-01-at-10.31.30-AM.png" alt="img"></p><p>六月，难道我们不应该用来追问吗？如果不曾封城，那么这两个月到底是什么？谁来为这两个月丢矢的时光负责？是谁关闭了医院，让那些无辜的人死在门口？是谁把人们封在小区里，任由他们挨饿？是谁丢掉了各地支援来的物资，任由他们腐烂在垃级桶里？是谁把变质的食物，卖给了官方，变成了政府物资？是谁封闭了道路，让亲人们永隔阴阳？是谁让那些逃离困居的人，长途跋涉，露宿在火车站？</p><p>那么的违法、颟顸、贪腐，难道就此忘却吗？</p><p>六月，难道我们不应该用来弥合吗？那么多人在封闭中丢掉了工作，那么多人衣食无着，那么多的企业陷人了困境，那么多的努力付诸流水，那么多原本正在向上的、生长的事物，都在这一切不可名状的封锁中零落成泥。</p><p>难道就此忘却了吗？</p><p>原谅我此刻无法建立欢乐的表情，或许我的沉重，来得那么不合时宜。在苦难过后，讨论欢乐是一件有罪的事情。而如果这个苦难本身就是被制造出来的话，那么忘却就是一种耻辱。</p><p>拥有追问的勇气，拥有记忆的能力，拥有质题的坚韧，也许才是这个六月，我们应该坚守的一点念想。尽管我知遣，这个念想多么地微弱，而它被4&#x2F;0&#x2F;4的概率，又是何等地高昂。</p><p>这个四月，这个五月，将永恒留在我的记忆之中。它既是对我个人悲剧的纪念，又是对于这片土地上难以消解的过往的一中追寻。</p><p>我们的民族似乎特别善于遗忘和忘却。在每一场灾难之后，我们总是能够找回生存，找回生活，甚至，找回欢乐。</p><p>因此我们总在轮回之中，如同曾经的长安、洛阳、汴州、杭州、金陵。他们在一场场废墟中崛起，又在一场场兵燹与戾气中沦为废墟，宛如天命。</p><p>天命从来沉默不语，世人从来自作自受。</p><p>如果我们依旧那么轻易地谈论生活，如果我们能够那么轻率地选择遗忘，我们就会发现，在不远处，有另一外场无妄之灾，正在等待。</p><p><a href="https://chinadigitaltimes.net/#facebook"></a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;rf.&lt;/p&gt;
&lt;p&gt;微信公众号｜哥轮布碎碎报&lt;/p&gt;
&lt;p&gt;作者：连清川&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;声明：转录归档的文章并不代表博主的立场或观点。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="转录归档" scheme="https://yexingshusheng.com/categories/%E8%BD%AC%E5%BD%95%E5%BD%92%E6%A1%A3/"/>
    
    
    <category term="202206" scheme="https://yexingshusheng.com/tags/202206/"/>
    
    <category term="404文库" scheme="https://yexingshusheng.com/tags/404%E6%96%87%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>健康学习到150岁 - 人体系统调优不完全指南</title>
    <link href="https://yexingshusheng.com/2022/05/jian-kang-xue-xi-dao-150-sui-ren-ti-xi-tong-diao-you-bu-wan-quan-zhi-nan.html"/>
    <id>https://yexingshusheng.com/2022/05/jian-kang-xue-xi-dao-150-sui-ren-ti-xi-tong-diao-you-bu-wan-quan-zhi-nan.html</id>
    <published>2022-05-31T12:41:59.000Z</published>
    <updated>2022-05-31T12:54:19.306Z</updated>
    
    <content type="html"><![CDATA[<p>原文来自GitHub热榜，看来搞养生，还得看这届程序员…</p><p>至于GitHub原文，鉴于网络问题，部分人可能打不开，就直接复制过来了…</p><blockquote><p>rf.</p><p>原文链接：<a href="https://github.com/zijie0/HumanSystemOptimization">健康学习到150岁 - 人体系统调优不完全指南</a></p><p><a href="https://hubermanlab.com/">原版的 podcast 内容</a></p></blockquote><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>去年 5 月曾经写了一篇文章介绍了下 <a href="https://zhuanlan.zhihu.com/p/371254789">Lex Fridman 大佬的日常生活安排</a>，后续我也根据他的方法对自己的日常生活做了一系列规范和改进。这一年整体实行下来，效果还是非常显著的，本文的最后会对我的一些实践以及借助的工具做一些分享。</p><p>最近几个月，偶然在油管上看到了个 <a href="https://youtu.be/2ekdc6jCu2E">Rich Roll 采访 Andrew Huberman 的 podcast</a>，介绍了如何提升我们日常工作，学习表现的相关神经科学原理与可以利用的“工具”，瞬间打开了一扇新世界的大门。后续又一连追了好几集 Huberman 自己的 podcast，从各个方面了解了一下跟我们日常生活，健康，学习，工作，锻炼等方面相关的知识。与其它很多讲“养生”的文章和视频最大的区别在于，Huberman 本身是斯坦福的神经科学教授，其中讲述的内容都是<strong>来自于高质量，peer reviewed 的科学研究成果</strong>，从机体工作原理出发，非常细致地介绍了相关的实验和结论，并给出了很多实操建议（很多都是零成本，不是搞推销的……）。</p><p>通过一系列的学习，逐渐有种学习了各种人类的“组成和操作原理”的感觉。通过一系列的工具和实践，我们也可以<strong>像调优软件程序那样来“调优”我们自身的人体系统</strong>。这篇文章就来介绍一些相关的知识内容。注意，原版的 podcast 中有非常多专业性的阐述，在这篇文章中基本都去掉了，尽量以故事性的描述来讲解，相对会比较好理解。当然准确性也会因此有所下降，如果希望获取更专业的内容，强烈建议观看 <a href="https://hubermanlab.com/">原版的 podcast 内容</a>。</p><h1 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h1><p>如果你想要获得健康，更好的工作学习状态，提升生理健康如免疫，新陈代谢，以及心理健康如更好的心情，专注能力等，最最重要的前提是拥有一个良好的睡眠。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>睡眠最重要的控制机理是我们内在的生物钟。随着生物钟的影响，我们体内的各类化学物质会发生变化，体温也随之改变，会影响我们的各种内在状态和外在行为。Huberman 教授很形象地描述了这个“生物钟”的具体作用方式：在早上，身体释放的皮质醇（cortisol）和肾上腺素（aderenaline）会让我们醒来，同时还会设定松果体释放褪黑素的倒计时钟，会在十多个小时之后让我们感到困意再次入睡。</p><p>影响这个生物钟的最大因素是光照。我们的眼睛除了能够看到东西，另外一个重大的作用就是<strong>通过黑视素神经节细胞来接收光照信息，用以设定我们的内在生物钟</strong>。这也是为什么有时候我们通宵工作之后，虽然已经持续很久时间没有睡眠了，但随着太阳升起，整体的生物钟被设定到了类似起床时的状态，各类化学物质的释放会让我们突然感觉又有精神了。后续很多最佳实践里也都跟这个原理相关，我们需要控制自己接收光照的时间点，类型和时长。</p><p>此外，<strong>体温也是一个用于控制我们生物钟的手段</strong>。一般来说我们的体温会从深睡眠中比较低的状态逐渐升高，到醒来后持续上升。到了一天的后半段会开始逐渐下降，直到再次进入睡眠。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>基于上面的原理，Huberman 教授提供了一系列提升睡眠的最佳实践：</p><ul><li>皮质醇的释放与接触阳光有关，因此如果想尽快醒来且保持日间良好的精神状态，<strong>起床后应该到外面去接触阳光，持续 2-10 分钟</strong>。这对于血压控制，心理状态，设定睡眠的“倒计时钟”等都有很大好处。户外日光的效果最好，如果是人造光源，蓝光的效果会比较好，且最好是上部（天空的位置）的光源。根据光照强度推算，隔着窗户接收日光的强度会降低 50%以上，而达到同样效果所需要的光照时间则需要 50 到 100 倍。有意思的是，这一点对于视障人士也有效，因为前面提到的黑视素神经节细胞并不是用于视觉成像的细胞。</li><li>对应的，<strong>在晚上要尽量减少光源的接触</strong>，因为这会扰乱我们的生物钟，让身体系统误以为是在白天。尤其是晚上 11 点到次日凌晨 4 点之间接收光源，会抑制后续几天的多巴胺的释放，影响心情，心理健康，专注度，学习能力，新陈代谢等等。关于多巴胺的作用和机理，后面会再单独介绍。</li><li>如果不可避免需要在晚上接触光源，处于较低位置，暗淡的红光，蜡烛之类的会相对好一些。如果要看电脑，建议使用 blue blockers 眼镜，这跟一些电脑软件会自动调节屏幕色温的效果可能类似。</li><li>傍晚观察落日，对于后续入睡也有帮助，甚至能减轻晚上摄入光照的负面影响，有点神奇。</li><li>人一天中的精神状态一般会在中间有个短暂的低谷，所以午睡对于有些人可能是有帮助的。也可以用一些其它的非睡眠深度休息的方式来替代，如 <a href="https://youtu.be/M0u9GST_j3s">Yoga Nidra</a>，<a href="https://www.headspace.com/">冥想</a>，<a href="https://www.youtube.com/c/MichaelSealey">自我催眠</a>（可以利用一些 App，如 Reveri）等。</li><li>体温对生物钟周期的影响：<ul><li>早上洗冷水澡，会让人快速升温，从而把睡眠周期往前移（早起）。</li><li>晚上锻炼身体，会让人保持高体温，从而延后周期（晚睡）。</li><li>可以选购一些自动控制体温的智能床垫来提升睡眠质量。</li></ul></li><li>一般建议的锻炼时间：醒来后 30 分钟，3 小时和 11 小时这三个时间点。不过总体来看好像影响度比较小。</li><li>饮食和药物因素：<ul><li>咖啡因会占据腺苷（adenosine）的受体，阻断入睡的信号。有不少文章都提到中午之后尽量不要喝咖啡，但 Huberman 表示没有科学实验表明咖啡因对所有人的效果是一样的，得根据自己的测试情况来。比如他自己在下午 5 点喝咖啡也能正常入睡。</li><li>镁，对入睡有帮助。</li><li>芹黄素也能帮助入睡，但要注意对雌性激素的影响。</li><li>建议不要摄入太多牛磺酸。</li><li>不建议通过摄入褪黑素来帮助入睡，褪黑素药物本身的规格把控不严格，且褪黑素容易引起抑郁情绪。</li><li>中午可以吃低卡路里以及含酪氨酸的食物，如坚果，大豆，部分蔬菜等，提升多巴胺，肾上腺素，保持清醒。</li><li>晚上则可以吃点淀粉，白肉等富含色氨酸的食物，进而转化为血清素，会让人更加平静，容易入睡。</li></ul></li><li>对于绝大多数人，6-8 小时的睡眠时长是比较健康的。</li><li>对于各类药物的检索可以参考：<a href="https://examine.com/">examine.com</a>。</li></ul><h1 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h1><p>在前面 Lex 的分享中，提到了他采取了生酮饮食以及 fasting（禁食）的习惯，这引起了我对于饮食习惯的注意。Huberman 教授正好也有几个 podcast 介绍了 fasting，肠道健康等话题，很有意思。</p><h2 id="Fasting-的背景"><a href="#Fasting-的背景" class="headerlink" title="Fasting 的背景"></a>Fasting 的背景</h2><p>我们可以把身体跟进食相关的化学状态分成 2 类：</p><ol><li>吃饱了的状态，也就是血糖含量较高的状态。此时我们身体会更活跃地进行体内细胞的复制与成长。</li><li>禁食的状态，也就是血糖含量较低的状态。此时我们的身体会更活跃地进行体内细胞的修复与清理（autophagic）。</li></ol><p>由于睡眠时我们天然是不吃东西的，所以一般来说睡眠中的一部分时间会使我们处于禁食状态，饮食时间的选择实际上就是在控制上述两个状态的持续时间和平衡关系。比较有意思的是世界上很多民族文化和宗教中，都有一些跟禁食相关的习俗，甚至会持续很多天。</p><p>在 2012 年，科学家开始对小白鼠做实验，把他们分成两大组，一组可以在一天中的任何时间吃东西，而另一组只能在固定的 8 小时里吃东西。在大组里再区分小组，给小白鼠吃健康的和不健康的食物。结果发现，只能在 8 小时里吃东西的小白鼠们，即使吃的是不健康的高脂肪食物，他们的健康水平仍然得到了保持甚至提高，相比所有不做限制的组都有明显的提升。</p><p>这个研究震动了学术界，后续又有非常多的针对人类，不同性别，不同年龄，不同职业（包括运动员）的各种实验与论文发表，科学家们发现这种<strong>间歇性禁食状态对于身体有非常多的好处</strong>，包括：促进肝脏健康，胆汁酸代谢，炎症自愈，保持体重，提升 brown fat 储备（对健康有益），防止非酒精性脂肪肝，血糖控制，肠道健康等等。如果养成间歇性禁食的习惯 60 天以上，还会让我们的身体倾向于代谢脂肪来供能，控制体重。</p><p>因此，Huberman 教授指出，<strong>何时进食，与吃什么东西，其实是同等重要的</strong>。这个研究也让很多学术界的研究人员自己也都养成了 fasting 的习惯，包括 Huberman 自己。</p><h2 id="Fasting-的实践"><a href="#Fasting-的实践" class="headerlink" title="Fasting 的实践"></a>Fasting 的实践</h2><p>由于长时间的禁食难度较大，所以绝大多数的研究都专注于间歇性禁食，也就是 time restricted feeding。简单来说就是跟前面的小白鼠实验一样，在一天的固定时间段来吃东西（跟睡眠周期对齐），而其它时间段都不摄入任何食物的做法。这里简单整理为基础和高阶两个版本：</p><ul><li>基础：如果想享受 fasting 的基础收益，最简单的执行原则是<strong>起床后至少 1 小时内不要吃东西，同时睡前的 2-3 小时不要吃任何东西</strong>。</li><li>高阶：目前研究结果中<strong>最理想的进食窗口是 8 小时</strong>，结合社会习俗等，一般比较合理的时间在 10-18 点或 12-20 点的范围。看起来<strong>不吃早饭并不是什么坏事</strong> :)</li><li>作者特地温馨提醒，如果想通过健身来增肌，建议可以把这个时间窗口往前移，因为早上摄入蛋白质会对肌肉增长有益。而健身的时间可以自由选择。</li><li>尽量<strong>保证这个窗口时间的稳定性</strong>，也非常重要。否则就跟频繁倒时差产生的效果差不多，会打不少收益折扣。</li><li>如果想尝试高阶 fasting，建议逐渐切换进食习惯，例如每两天缩短 1 小时的进食窗口，逐渐达到理想的 8 小时。</li></ul><p>值得注意的是，这里说的不吃任何东西，并不是说连水也不能喝。从前面的背景可以看到，是否处于禁食状态，主要依据是血糖水平，因此：</p><ul><li>喝水，茶，咖啡（不加牛奶）等，并不会中断禁食。但一勺糖的摄入就会中断。</li><li>晚饭后想尽快进入禁食状态，可以做一些轻量运动，比如散步等，加快血糖清理。</li><li>二甲双胍，黄连素（berberine）等可以直接促进血糖清理。肉桂皮，柠檬汁，也能轻微降低血糖。</li></ul><p>最后，如果禁食期间觉得有些头晕，颤抖，并不需要立刻进食或摄入糖分。可以喝一点盐水（可以加柠檬汁），一般就能很好的缓解症状。这让我想起 Lex 会提到了会服用药片来补充各种电解质元素，比如钠，镁，钾等。</p><h2 id="饮食与消化道健康"><a href="#饮食与消化道健康" class="headerlink" title="饮食与消化道健康"></a>饮食与消化道健康</h2><p>由于我个人的肠胃功能比较差，所以也特别关注了一下消化道健康的话题。Huberman 邀请了一位非常知名的微生物学家 Sonnenburg 来介绍肠胃微生物群落与我们的健康之间的关系，也是学到了很多新的知识：</p><ul><li>肠道的微生物群不仅影响消化系统的健康运作，<strong>对人体的免疫系统也起到了非常关键的因素</strong>。</li><li>婴儿出生，成长的方式会形成非常不同的肠道菌群生态。暴露在微生物环境中（但要注意会引起疾病的情况），对于维持菌群环境是有益的，比如家里养宠物，让孩子自由玩耍等，不需要过度清洁与消毒。</li><li>什么是健康的肠道菌群生态，目前没有一个标准的结论。不过总体来看，<strong>菌群的多样性程度高，一般就表示更加健康</strong>。</li><li>抗生素会严重破坏肠道菌群生态，需要谨慎使用。</li></ul><p>在访谈中，两位重点讨论了一个实验，就是什么样的饮食方式会让我们更好的维持肠道菌群的多样性和健康。实验主要对比了两种附加饮食：</p><ul><li>高纤维食物：全谷类，豆类，蔬菜，坚果。这也是传统上被认为非常健康的食物，其中很多纤维的分解都需要肠道菌群的帮助，换句话说，纤维就是它们的“食物”。</li><li>发酵类食物：酸奶，牛奶酒（kefir），康普茶，酸菜，泡菜，纳豆等。注意需要是自然发酵，一般是冷藏且非罐装的食品。而且像酸奶这类要格外注意不要加糖等添加剂。</li></ul><p>实验的结果也颇令人意外：</p><ul><li>摄入发酵类食品的组，显著提升了肠道菌群的多样性。被试者<strong>几十个免疫标志物的显著降低，对各类炎症都有更好的抑制作用</strong>。没想到吧，肠道菌群还能调节炎症。</li><li>肠道菌群本来的多样化程度比较高的人，摄入高纤维食物是有帮助的。如果不是，则摄入高纤维食物的帮助不大。在工业化进程中，人类的进食习惯已经有很多代都转变为了摄入大量肉类，加工食品等，肠道菌群的生态无法仅通过提高纤维食物的量来改变其族群结构。</li></ul><p>此外在访谈中，两位还讨论了具体食谱推荐的问题，引用了 <a href="https://youtu.be/sJLK3sVexIk">Christopher Gardner 关于生酮饮食与地中海饮食比较的研究</a>。这里总结一下实践建议：</p><ul><li><strong>如果要改善肠道菌群生态，最好的方式是一天两次摄入天然发酵类食品</strong>。</li><li>高纤维食物对于肠道菌群生态的维护是有益的，建议日常饮食以植物类食物为主，尽量避免深度加工食品的摄入，控制糖的摄入。Sonnenburg 教授还讲了个故事，说微生物学家参加的会议，一般餐厅的沙拉吧总是会供不应求 :) 前面提到的 Rich Roll 大佬也是个素食者。</li><li><strong>益生菌的效果没有广泛研究支持</strong>，且这类产品的监管很有限。<strong>益生元的效果也是好坏参半</strong>，缺乏多样性，溶解速度太快等问题都使总体效果存疑。</li><li>地中海饮食相比生酮饮食来说对健康的影响效果接近，但更容易坚持遵循。另外生酮饮食如果长期实践可能有一定的风险。所以<strong>总体更推荐地中海饮食结构</strong>。</li></ul><p>另外值得参考的是我们也有官方的 <a href="https://sspai.com/post/72984">中国居民膳食指南</a>，或许更适合东方人的饮食习惯。</p><h1 id="心态与动力"><a href="#心态与动力" class="headerlink" title="心态与动力"></a>心态与动力</h1><p>这一部分主要介绍的是人体的多巴胺系统原理，以及如何利用它来形成健康，自律的生活方式。这一集是 Huberman 开播以来播放量最高的一集，对于强健我们的心智有着非常好的指导作用。</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>多巴胺是一种非常重要的化学物质，主要作用于两个神经回路：一个影响身体的运动，例如帕金森病与多巴胺的分泌不足有关；另一个则影响我们的动机，欲望与快乐，这几乎与我们从事的各种活动有关，无论是工作，学习还是社交，休闲娱乐。这里我们会主要讨论多巴胺的后者影响能力。我们为什么会“放弃”，实际上是由于在不安，压力，沮丧等情绪作用下，身体内的去甲肾上腺素水平不断提升，当超过一定阈值时，神经系统中的认知控制就会关闭，我们就放弃了。多巴胺能够抑制去甲肾上腺素作用，从而持续“激励”我们前行。</p><p>神经系统中多巴胺含量水平的高低会影响我们的情绪，当多巴胺水平低时，我们会感到情绪低落，没有动力，而多巴胺水平高时，我们会感到兴奋和快乐。在通常情况下，我们的身体处于多巴胺 baseline 的状态，当我们达成一些令人兴奋的目标（比如玩游戏胜利，考试拿高分）后，多巴胺的水平会达到一个高峰，此时我们就会获得巨大的愉悦感。在高峰之后，多巴胺水平会回落到比 baseline 更低的一个水平，且这个状态会持续一段时间。</p><p>这里有两个非常重要的原理：</p><ul><li>多巴胺绝对值含量的高低只是一方面，<strong>更重要的是其“相对变化量”的多少</strong>。比如在刷抖音时看到了一个很有趣的视频，多巴胺水平升高，你会感到快乐，刷到下一个视频时，你感到的快乐程度好像不会那么强烈了，因为多巴胺已经在一个比较高的水平，难以形成更大的变化量。而同样的视频，如果你是几天之后看到，或许你会觉得有意思的多。所以<strong>当你持续做一件喜欢的事情时，你感受到快乐的阈值也会不断提高</strong>。</li><li><strong>多巴胺的总体“储备”是有限的</strong>！也就是说无论你是通过学习，工作，娱乐，社交，运动等不同方式来获得快乐，所消耗的“快乐货币”都是同一种：多巴胺。举几个例子来看下这个原理带来的影响：<ul><li>很多自律的人都会说自己是 work hard，play hard 的生活方式，比如工作日通过高强度的工作来获得成就和满足感，休息日进行各种休闲娱乐，运动，社交等方式来获得快乐，其实背后都是在释放多巴胺来获取快乐。长期持续，我们身体的多巴胺 baseline 会逐渐下降，出现一种耗尽（burn out）的心理感觉，对很多事物无法保持之前的兴趣与精力。</li><li>很多人会对玩电子游戏着迷，因为它们能带来巨大的多巴胺释放刺激让人感到快乐。但要意识到，多巴胺的储备是有限的，如果对此上瘾，你的多巴胺耗尽问题就会变得非常严重：一方面能够引起你兴趣的事物会变少，可能只有玩游戏才能带来快乐；另一方面，后续甚至会导致玩游戏本身也无法触发多巴胺释放，引起严重的抑郁问题。</li></ul></li></ul><p>另外，<strong>多巴胺也具有叠加效应</strong>。比如你喜欢健身，那么运动就会刺激多巴胺的释放。而我们实际去健身时，可能会不自觉地安排了很多其它的“快乐因素”，比如选一个精神状态比较好的日子，运动前喝一些能量饮料，跟认识的朋友一起去，边健身边 social，听一些自己喜欢的音乐或 podcast，等等。这些因素也都会促进多巴胺的释放，让你感到“前所未有的快乐”。但要注意前面的原理，多巴胺的高峰越高，后面随之而来持续的低谷也会越长，而且长此以往，可能会降低你单纯从运动中获取快乐的能力。这样的例子还有很多，比如边跟朋友吃饭，边玩手机，拍照发朋友圈，可以计算一下叠加了几种快乐因素 :)</p><h2 id="影响多巴胺的外界因素"><a href="#影响多巴胺的外界因素" class="headerlink" title="影响多巴胺的外界因素"></a>影响多巴胺的外界因素</h2><p>我们来看下具体影响多巴胺释放的各类因素有哪些，首先是促进多巴胺分泌的：</p><ul><li>巧克力，提升到 1.5 倍的多巴胺 baseline</li><li>性行为，提升到 2 倍</li><li>尼古丁，提升到 2.5 倍</li><li>可卡因，提升到 2.5 倍</li><li>安非他命，提升到 10 倍</li><li>咖啡因本身只会少量提升多巴胺，但它会抑制一些多巴胺受体，提升同等多巴胺造成感受的效果</li><li>马黛茶，包含咖啡因，能控制血糖，还能保护多巴胺神经元</li><li>刺蒺藜豆也能提升多巴胺（基本等同于 L-DOPA），还能提升男性精子数量和质量</li><li>运动，带有主观成分，喜欢跑步的人，可以提升到 2 倍 baseline</li><li>健康的社交关系也会促进多巴胺释放</li></ul><p>食物方面感觉 Huberman 教授<strong>非常推荐马黛茶</strong>。</p><p>也有很多提升多巴胺释放或影响其效果的药物：</p><ul><li>L-Tyrosine（酪氨酸），提升多巴胺</li><li>Phenethylamine（PEA），巧克力中也包含，能够提升多巴胺</li><li>Huperzine A，提升多巴胺</li><li>各种“聪明药”，如 Adderall, Modafinil, Alpha-GPC, Ginkgo 等，留学党应该很多都有耳闻</li></ul><p>通常来说，<strong>不推荐持续使用这些药物</strong>，因为多巴胺释放之后的高峰会带来 baseline 水平的降低，导致无法享受活动的快乐，无法专注，限制学习能力和神经元可塑性等。Huberman 表示<strong>一周使用一次的频率应该是安全的</strong>。</p><p>最后还有一个比较特别的研究，就是<strong>冷水浴能够提升多巴胺释放到 baseline 的 2.5 倍左右</strong>，且持续时间更长，能达到 3 小时左右。建议使用 10-14 摄氏度的水温，注意安全。此外冷水浴也不需要太频繁，每周 11 分钟左右足够。如果已经习惯了冷水浴，那么也就没有释放多巴胺的效果了。</p><p>还有一些因素会降低多巴胺，如：</p><ul><li><strong>褪黑素，会引起多巴胺的减少</strong>。前面也提到过并不建议使用褪黑素来帮助入睡，或者适应时差等。</li><li>睡眠时段接触光源，也会引起接下来几天的多巴胺水平下降。<strong>半夜睡不着刷手机是很有害的哦</strong>。</li></ul><h2 id="维持健康的多巴胺水平"><a href="#维持健康的多巴胺水平" class="headerlink" title="维持健康的多巴胺水平"></a>维持健康的多巴胺水平</h2><p>了解了原理和各种影响因素后，我们来看下如何有效设计我们的生活工作方式来维持健康，可持续的多巴胺水平。</p><p>简单回顾一下，前面我们已经知道了多巴胺储备有限，且对一件事物上瘾会不断提高感受快乐的阈值，那么如何让我们能对一件事情保持长时间的兴趣和投入度，又不至于耗尽多巴胺呢？一个经典的例子是赌场的运作方式，我们并不是每一次下注都能赢，偶尔赢一次会释放多巴胺，而且根据赢得钱的多少有所上下浮动，这会吸引玩家持续参与。这就是一种非常有效的<strong>间歇性且随机的奖励机制</strong>。感觉很多游戏，社交网络产品也借鉴了这个思路来进行设计。</p><p>对于我们经常需要从事的活动，我们也可以模拟这个机制。还记得前面提到的<strong>多巴胺叠加效应</strong>吗？我们可以<strong>通过随机化叠加因素的多少，来实现多巴胺释放的差异性</strong>。还是以健身为例，我们可以随机决定今天是否要听音乐，是否去健身时带手机，是否要在健身前喝能量饮料等因素。如果其它什么都不做，只是单纯健身，那么多巴胺的释放量就会相对较低。如此就能模拟多巴胺释放有高有低的随机奖励机制。</p><h2 id="成长型思维"><a href="#成长型思维" class="headerlink" title="成长型思维"></a>成长型思维</h2><p>最后来看下如何构建良好的思维方式来利用多巴胺系统提升自我。</p><p>有一个非常知名的实验，挑选了一群天生喜爱画画的小朋友，在他们完成画作后给与一些奖励。后面在移除这些奖励后，小朋友们对于画画的兴趣和动力大大降低了。这个实验说明，当我们因为一个活动收到奖励（比如金钱，美食等）时，我们<strong>反而会降低活动本身的愉悦程度</strong>。而且多巴胺本身影响我们对时间的认知，同时也影响我们的情绪状态，如果我们<strong>始终以完成活动后的奖励为目标，则整个过程中就很少释放多巴胺，让原本困难的过程变得更加难以坚持</strong>。</p><p>仔细想一下，这是一个非常有意思的观察。多巴胺有点像我们的“本能系统”，决定了我们是否有动力做一件事。但反过来<strong>我们的主观思想却可以影响这个系统起作用的方式</strong>，这也是人类为何能摆脱动物本能，达成很多需要“反人性”的投入才能取得的成就的原因吧。上述的实验是我们的主观思想造成的一个反面作用的例子，我们自然也可以实现正面作用，那就是成长型思维。</p><p>具体来说，就是<strong>通过自我暗示，把努力过程本身当作一种“奖励”</strong>。我在努力学习，这个过程本身就是有趣的，会让我不断变得更强，这样的想法会在过程中激发身体系统释放多巴胺，而多巴胺提升了我们的情绪和动力水平，也会让努力的过程中碰到的困难变得相对容易克服。专注于这个过程的本身，而不是在过程前进行各种外界刺激（如前面提到的药物），或者在过程后给自己巨大的奖励。</p><p>这种思维方式看起来很主观，但这就是我们的神经系统工作的方式，虽然人类的“硬件系统”都差不多，但知识，思维这些运行之上的“软件”却可以千差万别。<strong>我们可以通过自律，自我暗示来改变自身对各类活动的喜好</strong>。例如通过暗示 fasting 对我们健康的益处，来获取满足感，而不是借助于 fasting 结束后的大快朵颐。通过自律抵御高油盐食物的吸引力，并且自我暗示植物类食物对身体的好处，坚持一段时间，会觉得花椰菜也挺美味的。这也是为什么我们在这篇文章中介绍了很多原理性的内容，而不仅仅是行为建议。因为这些原理知识能够让我们做更好的自我暗示 :)</p><p>多巴胺系统中也有对我们认知成长造成“障碍”的运作机理。例如当我们接受到的信息支撑我们之前的信念时，也能够激发多巴胺的释放让我们感到快乐，这从本质上会改变我们对世界的认知。由此可见，“空杯心态”是多么难得的品质，网上如此多的争论无法达成共识也有很大一部分“归功”于此。如何克服神经系统中的这类缺陷呢？一种可能的方法是尽可能调节情绪，使自己处于镇静的状态（提升血清素水平），这样才能让自己更好的去倾听和吸收跟自己认知不一致的信息，更好地协同合作。</p><p>这一节的 podcast 对我本人的冲击非常大，强烈建议大家观看这期 <a href="https://hubermanlab.com/controlling-your-dopamine-for-motivation-focus-and-satisfaction/">Mindset &amp; Drive</a>，相信也会有不同的收获。</p><h1 id="学习与专注"><a href="#学习与专注" class="headerlink" title="学习与专注"></a>学习与专注</h1><p>在了解了多巴胺的运作机制基础上，我们可以继续探究一些跟大脑健康，专注度，如何进行高效学习相关的话题。</p><h2 id="学习的原理"><a href="#学习的原理" class="headerlink" title="学习的原理"></a>学习的原理</h2><p>从脑神经科学来看，学习的本质是神经元的重新连接（rewire），进一步来看，需要大脑处在一种学习的化学状态下，也就是 Huberman 经常提到的神经可塑性（neuroplasticity）状态。要达到这个神经可塑性状态，有两个重要条件，一个是足够的专注度，另外一个是“犯错”的信号（后面会展开）。另外大脑一个比较有意思的机制是，在学习时的神经可塑状态下，乙酰胆碱会标记需要改变的神经元，而具体的神经元重连接则主要是在休息和睡眠时发生，是不是有点像 JVM 虚拟机的垃圾回收机制 :)</p><p>什么是犯错信号呢？当我们尝试做一些事情，但没有达到预期目标时，身体会给大脑发信号，“我犯错了”。处在这种犯错，沮丧的认知状态下，神经系统会释放肾上腺素（提升 alertness），乙酰胆碱（提升 focus），多巴胺（促进神经元的 change，rewire）等化学物质，激活神经元的可塑性。也就是说，<strong>犯错是我们进入学习状态的重要前提</strong>。搞机器学习的同学应该很熟悉了吧，这跟我们训练模型不是一模一样么 :) 另外很多人可能觉得心流（flow）状态是学习的最佳状态，而 Huberman 则不这么认为。<strong>心流是一种精神高度集中且接近于自动化的状态，是在做我们已经知道怎么做的事情，而不是在学习新的知识技能</strong>。</p><p>对于这个学习状态，经典的实验是给人们戴上一些能转变角度的眼镜，然后执行一些类似物体抓取的任务。由于看到的东西通过眼镜改变了其本来的位置，一开始在尝试时总会出现抓取动作的偏离。但后续在进入神经可塑性状态后，我们能逐渐适应相关的视觉偏移，协调自己的听觉，动作等都与之协同，顺利完成任务。更有意思的是，<strong>这个“神经可塑性”的化学状态是可以持续的</strong>，我们甚至可以先通过一些其它操作触发大脑的这个机制，再去进行真正的学习，以加快学习的速度。这里还有一个隐藏逻辑，当你在遇到挫折困难时，大脑进入了可塑性状态，而此时你却放弃了，那么<strong>神经元也会重新连接到这种容易放弃的行为模式，形成恶性循环</strong>。</p><p>人在年幼时期大脑天然的神经可塑性会比较好，而在 25 岁以后则会大大下降。我们后面会提到如何来进行克服。</p><p>另外，<strong>休息和睡眠时也会发生大量的神经元重连接的活动</strong>，这也是之前我们就提到过的，高质量的睡眠是实现很多生理，心理健康强壮的先决条件。</p><h2 id="利用神经可塑性"><a href="#利用神经可塑性" class="headerlink" title="利用神经可塑性"></a>利用神经可塑性</h2><p>如果正在阅读文章的你还未满 25 岁，那么恭喜你，你的神经可塑性仍然非常的好，可以<strong>尽可能广泛的学习各种知识和技能</strong>。比如你可以很快学会各种乐器，新的语言，新的运动，新的专业技能等等。通过更广阔领域的体验接触，尽量找到你最有兴趣的方向，可以后续再不断深入经营。</p><p>如果已经像我一样超过了 25 岁，那么还有很多办法来提升神经可塑性：</p><ul><li>通过实验发现，<strong>成年人对于小幅度的增量学习是完全可以适应与掌握的</strong>。例如每次视觉上的偏差只有 7 度，而不是一下子就来个 180 的大颠倒，那么成年人也能很快从错误中学习纠正。应用到实际学习中，我们每次学习的内容可以控制一下不要太多（本文有点违反了，建议收藏慢慢学习），多次积累来完成神经系统的调整学习。</li><li>对于达成目标的渴求度越高，重要性越大，奖励的刺激越大（比如为了生存），则神经可塑性就会越容易出现。这个比较符合直觉，但是现实中可操作性可能不高。</li><li>第三点最有意思，<strong>通过扰乱前庭神经系统（vestibular system），能够达到神经元可塑性的状态</strong>。简单来说，就是让你的身体有一些“新颖的重力体验”，如倒立，瑜伽，体操，滑板，任何让身体会失去平衡的一些状态等，会快速激发“我犯错了”的信号，进入学习状态，甚至可以在之后去做别的任务的学习。这一下子就让我想到了<strong>淘宝成立初期的“倒立文化”，没想到还真的有科学依据</strong>。需要注意的是，这个体验必须要新颖，也就是说如果你已经倒立很熟练了，那么去做倒立就是个日常行为，并不会给身体一种在犯错边缘，需要纠正的刺激。</li></ul><p>Huberman 认为，大脑的主要功能链路是感知，认知，情感，思想，行动。在尝试控制我们的神经系统来进行各种任务时（例如学习，解决困难问题，挑战运动极限），我们是很难用精神思想来控制其本身的（比如不断跟自己说我不能分心），更可行的办法是“逆向链路”，从我们的行动出发，利用神经系统的运作原理，逐渐影响思想，情感，认知甚至感知部分。这也是 Huberman 非常推崇各种“行动工具”的原因。Mood follows action。</p><h2 id="学习的理想状态"><a href="#学习的理想状态" class="headerlink" title="学习的理想状态"></a>学习的理想状态</h2><p>除了神经可塑性的化学状态外，我们也需要注意其它的因素。例如我们<strong>不能太放松以至于有些昏昏欲睡，也不能太紧张激动，无法控制自己拥有清晰的思考</strong>等。这些也都跟我们体内的多巴胺，肾上腺素，乙酰胆碱，血清素，褪黑素等化学物质的水平有关，需要做好调节。在之前 Rich Roll 的访谈节目中，Huberman 提了一个非常有效的“呼吸工具”，叫<strong>生理叹息</strong>（Physiological Sigh）。操作方法上简单来说就是吸两口气，然后出一口长气。通常情况下，只要一两次生理叹息就足以使我们的压力和警觉水平迅速下降，让人感到更加平静，提升学习表现。</p><p>前面提到的成长型思维也很重要，在遇到错误导致的沮丧感觉时，可以不断增强自我暗示，失败是帮助我们学习成长的唯一路径，对我们是有益的，以此增加多巴胺的释放，提升学习动力和过程中的愉悦感。</p><p>联系到睡眠对学习的促进作用，也有一些研究提供了一些相关的 tips：</p><ul><li>在学习时听一些有规律的节拍，在入睡时也播放同样的微弱节拍，能够提升学习和记忆的效果。</li><li>一般在 90 分钟的学习后（人体生物钟的周期），可以选择进行 20 分钟的休息（non sleep deep rest），也会加强学习的效果。</li><li>Gap effect，在学习中随机停止 10 秒钟，这些停止会在睡眠中加速“播放”，提升学习效果。</li></ul><h2 id="提升专注"><a href="#提升专注" class="headerlink" title="提升专注"></a>提升专注</h2><p>“专注”背后的机理是大脑中两种“网络模式”的协调，一种叫 Default network，在我们不做任何事情时被激活，另一种叫 Task networks，在我们专注于做某些事情时被激活。普通人的大脑能够很好地协调这两个模式，两者像跷跷板一样，当一种模式被激活时另一种模式会被抑制。而具有专注障碍（比如多动症）的人来说，这两者无法很好地进行协调，因此会出现无法专注的现象。</p><p>通过提升多巴胺水平，可以有效促进这两种网络模式的协调，因此有非常多的多动症治疗药物都跟提升多巴胺有关，例如 <strong>Adderall，Modafinil</strong> 等。一些调查表明，这些药物（经常被称为聪明药，nootropics）在美国被滥用的程度甚至超过了大麻，不少“学霸”都以此来提升注意力，减少对睡眠的需求。但 Huberman 教授表示，一方面多巴胺的刺激提升后都会带来多巴胺水平的低谷，另一方面这些药物也可能导致上瘾，对新陈代谢作用造成扰动，有很多负面影响，<strong>对长期的学习与记忆效果可能并没有提升作用</strong>。在之前介绍多巴胺的章节也有提到，应该谨慎使用这类药物，并严格控制使用频率不能过高。</p><p>最好的提升专注的方法当然是前面聊过的更好的控制我们的多巴胺系统，例如把行动跟背后的意义相连接，给自己正面的心理暗示；将任务拆成多个小的里程碑，通过过程自身的激励来促进多巴胺的释放提升我们的专注度。此外一些安全有效的提升专注力的方法包括：</p><ul><li>适量补充 <strong>Omega-3 EPA 鱼油</strong>，这是神经细胞的组成原料之一，能够有效减轻抑郁，对治疗多动症（ADHD）也有帮助。</li><li><strong>通过身体其它部分释放运动，可以帮助提升注意力</strong>。教授举的例子是作为神经科医生在开刀时，如果采用半蹲半站的姿态（运动释放），拿手术刀的手更稳定不容易颤抖。这让我想起以前读书时很多同学习惯转笔，现在工作了也有不少人喜欢玩指尖陀螺，或者站立办公，可能都是类似效果。</li><li><strong>限制视野范围，能够提升专注度</strong>。比如我们经常因为眼睛瞟到了任务栏上的消息提示闪动而分心，可以通过一些设置来进入“专注模式”。</li><li>视线的高低也会影响神经状态，<strong>视线往下看会让神经系统偏向镇静，放松，甚至困倦，而视线向上则会让系统提升警惕</strong>。工作时一般至少把显示器放置在鼻子位置之上。</li><li>大脑不擅长处理大量频繁的 context switch，典型的比如刷抖音，不同的信息以非常快的速度频繁切换，这对我们的注意力是有伤害作用的。2014 年的一项研究表示，<strong>我们每天在手机上花费的时间应该少于 60 分钟（青少年）&#x2F;120 分钟（成年）</strong>，以免引起注意力障碍问题。</li><li>还有研究表明，<strong>17 分钟的冥想，能够对大脑中的神经元做重新连接，永久地改善注意力</strong>。只要做一次就可以，完全可以尝试一下。</li></ul><h2 id="大脑健康"><a href="#大脑健康" class="headerlink" title="大脑健康"></a>大脑健康</h2><p>最后来看下提升大脑健康和效能的一些方法。</p><p>首先是前面提到过的，保证高质量的睡眠。</p><p>运动方面，<strong>对大脑直接帮助最大的是有氧运动</strong>，提升心肺功能，支持大脑供能。建议每周 150-180 分钟的有氧训练。</p><p>对于大脑健康有帮助的食物，其中前三点是比较重要的，后面的部分涉及的研究没有那么多：</p><ul><li><strong>Omega3, 尤其是 EPA 等脂肪酸</strong>，是大脑组成的重要部分，且一般人都容易摄入不足。多吃鱼，牡蛎，鱼子酱，奇亚籽，核桃，大豆。一天至少摄入 1.5 克，理想情况需要 3 克以上。不喜欢吃鱼的话可以辅助摄入鱼油。</li><li><strong>磷脂酰丝氨酸</strong>，也对认知能力有帮助。通过鱼，肉类，卷心菜来摄入。</li><li><strong>乙酰胆碱</strong>，重要的神经调质，提升注意力。摄入胆碱的重要来源是鸡蛋，尤其是蛋黄。土豆，坚果，水果中也含有，虽然没有蛋黄中的含量那么丰富。可以通过 Alpha-GPC 等补充剂来获取。</li><li>肌酸，尤其对于不吃肉的人，一天需要摄入 5 克左右。</li><li>花青素，在蓝莓，黑莓，葡萄等食物中有提供。可以降低 DNA 损伤，缓解认知下降等问题。大约每天需要 60-120 克蓝莓的补充。</li><li>谷氨酰胺，可以通过牛肉，鸡肉，鱼肉，鸡蛋，大豆，卷心菜，菠菜，芹菜等食物来摄取。提升大脑在缺氧（高海拔地区）下的表现，还能够抑制对糖的需求。</li><li>水，钠，钾，镁等电解质是神经元信号传递所需的基础元素，需要保证。</li></ul><p>这一节中还讨论了我们身体对各种食物喜好进行判断的三个渠道，前两个分别是味觉判断和营养成分的下意识判断。第三个比较有意思，也跟多巴胺有关，即我们可以<strong>通过提升大脑代谢的活跃度来增加对某种食物的喜好</strong>。比如你如果不喜欢吃鱼，一种方法是你可以把鱼跟你平时爱吃的食物一起吃，另一种是给自己足够的心理暗示，说服自己吃鱼是有益身体健康的。通过这两种办法，你都可以让大脑释放多巴胺，从而逐渐提升对鱼类食物的喜好程度。</p><p>最后，如果你对膳食补充剂感兴趣，还可以看看 <a href="https://www.thorne.com/u/huberman">Huberman 教授平时会吃的补充剂有哪些</a>。</p><h1 id="长寿"><a href="#长寿" class="headerlink" title="长寿"></a>长寿</h1><p>最后我们来看下如何延年益寿，这是 Huberman 跟这个领域的专家，来自哈佛的 David Sinclair 的一集访谈节目。</p><h2 id="衰老的本质"><a href="#衰老的本质" class="headerlink" title="衰老的本质"></a>衰老的本质</h2><p>Sinclair 认为，衰老是一种疾病，它本身导致了非常多通常意义上的疾病的出现，比如阿尔兹海默症，癌症等。我们可以通过科学的手段来“治疗”衰老，甚至逆转它。</p><p>从本质上来说，衰老是<strong>基因信息的损失</strong>，这分为两部分：</p><ul><li>DNA 本身的信息，比如细胞中的 DNA 结构会在辐射等情况下受到破坏。</li><li>控制哪些基因进行表达的信息受到了破坏，也就是所谓的表观基因组（epigenome）。这部分在衰老的因素中占了 80%。</li></ul><p>人体内有一个天然的“衰老时钟”，而且并不是以匀速走的。在年轻时我们的生长发育过程中，这个时钟走得更快。所以如果青春期发育比较迅速的人，一般来说整体的时钟走的比较快，寿命也会相对短，是不是有点吓人……而且，一般比较矮小的人，像侏儒很少会得心脏病，癌症，也会明显更长寿。不过不要紧张，前面提到了，基因本身的信息只占了衰老因素的 20%，<strong>控制基因表达这部分占了大多数</strong>。</p><p>这里有点意外的是 Sinclair 教授介绍的最重要的几个实验，都跟前面我们提到的 fasting 有关。比如一般老鼠的寿命大概是 2 年，他们实验室有一只叫 Yoda 的老鼠，活了足足 5 年。其主要的做法就是选取了侏儒基因，以及执行 fasting。</p><p>教授详细介绍了 <strong>fasting 为何能提升动物&#x2F;人类 30% 以上的寿命</strong>：</p><ul><li>在低血糖水平时，身体会抑制哺乳动物雷帕霉素靶蛋白（mTOR），激活去乙酰化酶（sirtuin），形成一个非常良好的化学状态，清理旧蛋白质，提高胰岛素敏感度，提供更多能量，修复细胞等等。后面这个乙酰化酶是我们抵御衰老的一个重要武器。</li><li>当胰岛素水平低时，“长寿基因”会被激活，如 SIRT1 等。</li><li>fasting 会给细胞足够的“休息时间”。</li><li>血糖水平低，会让身体对胰岛素更敏感，更快吸收血糖，也对健康有益。</li><li>当你从来不感受饥饿时，你的衰老时钟也走的更快。</li><li>除了 24 小时周期 fasting 触发的 autophagic，还有更深层次的清理机制，会在禁食第二，三天启动。在老年老鼠上的实验表明，这种长时间的禁食可以让他们延长寿命 35%。不过这个实操难度对普通人来说有点大。</li></ul><p>Sinclair 也对比了一些上个世纪失败的研究，比如通过抗氧化剂来抵御衰老。现代长寿研究的核心思想是，如何<strong>通过一些机制手段来触发身体自身的衰老抵抗机制</strong>。</p><p>此外 Sinclair 也介绍了一些激动人心的前沿技术，例如<strong>通过基因治疗方法，可以重启我们的 DNA 表达系统</strong>。通过一次注射，可以让盲人恢复视力，这已经在老鼠身上得到了验证。或许几年后，我们可以像死侍那样实现身体各部分的逆转老化。</p><h2 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h2><p>这里列出一些 Sinclair 自己的实践方式，如果想要采纳还是要结合自身的情况来看。有意思的是这集节目下有个热门留言是这个教授竟然已经 52 岁了，完全看不出来……所以你懂的。</p><ul><li>不吃早饭，午饭也吃的比较少，酸奶或者橄榄油，晚饭吃蔬菜为主，加鱼和虾，基本不吃牛排。不吃糖，甜品，面包。基本达到了 2 小时进食窗口的高阶 fasting 状态。他偶尔也会尝试一整天都不吃东西，但比较难坚持。</li><li>每天摄入 1 克的白藜芦醇（resveratrol），1 克的 NMN（进而会转化为 NAD，which is sirtuin 的“燃料”），还有二甲双胍（metformin）。其中锻炼的日子可能会跳过一些补充品。他并不吃复合维生素。</li><li>以蔬菜为主食的好处：富含各种营养，维生素；包含异种激素（Xenohormesis），植物基于“压力”之下产生的物质，对长寿有益。后者也可以通过槲皮素（quercetin）来做膳食补充。</li><li>一般会隔一天进行有氧运动和力量训练。有氧运动能提升 NAD 水平。</li><li>根据家族病史来决定一些药物摄入，如他 29 岁就开始服用降胆固醇药物。</li><li>对于人造甜味剂，教授认为总体来说是安全的。他偶尔也会喝健怡可乐。</li></ul><p>对于这一系列实践，Sinclair 教授都进行了 10 多年的自身实验，并使用各种手段来监控身体数据。通过监控数据可以推测出一个人的“生理年龄”如何（不是光看脸），他自己在上述实践下，生理年龄在持续下降，现在已经达到了 30 岁左右的水平（实际年龄 52 岁）。另外，他认为每个人的身体情况不一样，医院约定俗成的生理指标范围也不一定适合每个人。<strong>未来这种健康数据的实时监控与个性化诊断会成为主流</strong>。他举了一些例子：</p><ul><li>监控血糖水平 HbA1c，观察 fasting 的影响等。</li><li>监控炎症指标 CRP，与心脏病等各种疾病的诱发相关。</li><li>监控 LDL，通过药物等进行控制。膳食胆固醇对血液胆固醇几乎没有影响，不需要戒红肉，黄油等。</li><li>补充铁元素可能加速衰老。医学指标需要个性化，低铁元素含量并不一定导致贫血。</li></ul><p>还有一些影响寿命的负面因素：</p><ul><li>肥胖症会加速衰老。</li><li>吸烟，会破坏基因表达，加速衰老。</li><li>X 光检查同理，没有必要时，避免接触。</li></ul><p>展望一下 longevity 研究的未来，还是挺激动人心的。现代科学每一年能让我们的平均寿命延长 1&#x2F;4 年，如果每一年能让我们的平均寿命延长超过 1 年，则达到了<strong>寿命“逃逸速度”</strong>（类比以 1000 英里每小时的速度往西飞行，太阳永远不会落下），实现了“永生”。著名的未来学家 Ray Kurzweil 预测，大约 12 年后（2034 年）就能实现，让我们拭目以待。</p><p>除了这集 podcast，也必须附上吴承霖大佬的万星项目 <a href="https://github.com/geekan/HowToLiveLonger">程序员延寿指南</a>。</p><h1 id="个人实践"><a href="#个人实践" class="headerlink" title="个人实践"></a>个人实践</h1><p>前面介绍的内容有点多，这篇文章篇幅也有些超了。最后来简单介绍下我个人目前采纳的一些行动和辅助工具。</p><p>睡眠方面暂时没有什么特别的措施，现在带娃基本上晚上睡眠质量也比较一般。只是会稍稍注意一下晚上 11 点后尽量不接触手机光源。早起接收光照这点，基本上就是早上遛狗或者开车通勤时间来接触，基本压力不大。如果比较讲究的同学，还可以下一个 <a href="https://mycircadianclock.org/">My Circadian Clock App</a> 来追踪一下生物钟，也是 Satchin Panda 等大佬参与开发的项目，值得信赖。</p><p>饮食方面，开始尝试 8 小时进食窗口的 fasting，目前感觉良好。中饭一般吃蔬菜为主的轻食，晚上就比较放飞自我，想吃啥吃啥。早上会看情况喝点盐水，茶或者 AG1 的补充剂。膳食补充剂目前基本只有复合维生素和 EPA 鱼油在使用，后面可以参考下 <a href="https://fastlifehacks.com/andrew-huberman-supplements-list/">Huberman 的“配方”</a> 增加一些。Huberman 自己也在节目中表示<strong>对白藜芦醇和 NMN 还在观望状态</strong>，我查了些资料发现有争议的地方还不少，所以我个人建议先采纳广受认可和使用的一些补充剂，如 EPA 鱼油，二甲双胍等。个人目前考虑的补充剂列表：</p><ul><li><a href="https://www.thorne.com/products/dp/basic-nutrients-2-day">基础维生素</a>，常规补充剂。</li><li><a href="https://www.thorne.com/products/dp/super-epa-sp608nc">Omega-3 EPA</a>。</li><li><a href="https://athleticgreens.com/en">AG1</a>，超火的小绿粉，各种植物提取物 + 各种维生素矿物会，Fridman，Huberman 等大佬的节目里都有提到，就是贵了点。</li><li><a href="https://www.thorne.com/products/dp/betaine-hcl-pepsin-225-s">Betaine HCL &amp; Pepsin</a>，保护肠胃。</li><li><a href="https://www.thorne.com/products/dp/l-tyrosine">L-Tyrosine</a>，提升多巴胺，可能会买个尝尝鲜。</li><li><a href="https://zh.m.wikipedia.org/zh/%E4%BA%8C%E7%94%B2%E5%8F%8C%E8%83%8D">二甲双胍</a>，抗衰老“神药”。</li><li><a href="https://www.thorne.com/products/dp/resveracel">ResveraCel</a>，白藜芦醇，NR 等抗衰老组合。</li></ul><p>很多人都关心 fasting 可能引发胆结石，这里提供一些补充信息：</p><ul><li>从这篇 <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1419405/">Bloch, H. M. 等人的论文</a> 来看，fasting 过程中胆汁的饱和度有一个先上升后下降的过程，<a href="https://youtu.be/2lGuXBwudKw">Dr. Berg 也以此做了解释</a>，认为 fasting 加生酮饮食（摄入脂肪）对胆囊健康反而是有益的。</li><li>从这篇 <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1405175/">Sichieri, R. 等人的论文</a> 的结果来看，long overnight fasting 和节食会提升得胆结石的概率。不过减肥（减少脂肪）本身就会提升得胆结石的概率。</li><li>持续 24 小时以上的禁食相关的研究比较少（比较难执行），但从机理上来说长时间的禁食应该会增加得胆结石的概率。</li><li>饮食结构，自身状况对胆结石的形成也会有很大影响，例如高胆固醇，高胰岛素水平，高碳水饮食等。高纤维食物，健康的脂肪摄入，有助于降低得胆结石的概率。</li></ul><p>总体看下来，我个人感觉这块的实验上没有一个定论（就跟 <a href="https://www.coffeeandhealth.org/factsheet/gallstones-factsheet">咖啡是否会引发胆结石</a> 一样），但应该不是一个概率很大的问题，起码 Huberman 教授跟这个领域的另一位权威 Satchin Panda 教授都没有提到这块的问题。理想情况是执行 fasting 时持续对你的身体状况做医学指标的跟踪。其它就看个人选择了 :)</p><p>工作，学习，专注方面，主要看自律了。这方面我总体控制还可以，在了解了多巴胺的工作原理之后就更加有自信了，主要靠各种软件的专注模式来近似执行番茄时钟法，此外也采用了升降桌，大概有 30% 的时间站立办公。工作间歇会尝试一下 Yoga Nidra。此外晚上学习时段会用 iPad 的 Books 来记录一下阅读时间，基本上每天保持 30 分钟以上，持续坚持。后面考虑试试工作时喝马黛茶，以及夏天开始尝试冷水澡。</p><p>运动方面是这一年来改观最大的一项，依靠小米手环 PAI 指数功能的督促，基本上做到了每周平均 3 次的跑步或者羽毛球活动，持续把 PAI 值保持在 200 左右。总体来说对于精神状态的改观还是很大的，肚子上的脂肪也减少了很多。唯一比较困扰的是一般下班后运动都要 9，10 点开始了，结束后会离入睡的时间比较近，有时候会对睡眠质量有所影响。</p><p>最后，Huberman 教授的 podcast 中还有很多其它内容，比如习惯养成，健身增肌，应对恐惧与创伤，情绪管理等，感兴趣的朋友可以进一步挖掘。本文以实验事实与原理假设的陈述为主，以上所有的行动方案都需要在咨询医师，专业人员的条件下，结合自身情况执行，注意自身安全，本人与 Huberman 都不负相关后果责任。</p><p>备注：这篇文章也同时发布到了 <a href="https://github.com/zijie0/HumanSystemOptimization">Github</a>，欢迎大家 Star 并提出宝贵建议，谢谢！如果你对我的其它作品感兴趣，也欢迎搜索关注公众号：RandomGenerator。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;原文来自GitHub热榜，看来搞养生，还得看这届程序员…&lt;/p&gt;
&lt;p&gt;至于GitHub原文，鉴于网络问题，部分人可能打不开，就直接复制过来了…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rf.&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://github.com/zijie0/HumanSystemOptimization&quot;&gt;健康学习到150岁 - 人体系统调优不完全指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hubermanlab.com/&quot;&gt;原版的 podcast 内容&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="转录归档" scheme="https://yexingshusheng.com/categories/%E8%BD%AC%E5%BD%95%E5%BD%92%E6%A1%A3/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="health" scheme="https://yexingshusheng.com/tags/health/"/>
    
  </entry>
  
  <entry>
    <title>自己的想法?</title>
    <link href="https://yexingshusheng.com/2022/05/zi-ji-de-xiang-fa.html"/>
    <id>https://yexingshusheng.com/2022/05/zi-ji-de-xiang-fa.html</id>
    <published>2022-05-27T16:10:15.000Z</published>
    <updated>2022-05-29T16:11:30.122Z</updated>
    
    <content type="html"><![CDATA[<p>这世界上的绝大多数人，都分不清什么是「自己的想法」什么是「别人灌输给自己的想法」。人生很苦，盲从恰恰是一种简单方便获得归属感、自我价值、人生意义的方式，思考太痛苦了。放弃独立思考的能力，只能换取舒适但虚假的生活。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这世界上的绝大多数人，都分不清什么是「自己的想法」什么是「别人灌输给自己的想法」。人生很苦，盲从恰恰是一种简单方便获得归属感、自我价值、人生意义的方式，思考太痛苦了。放弃独立思考的能力，只能换取舒适但虚假的生活。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="日志随笔" scheme="https://yexingshusheng.com/categories/%E6%97%A5%E5%BF%97%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
  </entry>
  
  <entry>
    <title>有思想的人都很寂寞，幸好还有中文可以读</title>
    <link href="https://yexingshusheng.com/2022/05/you-si-xiang-de-ren-du-hen-ji-mo-xing-hao-huan-you-zhong-wen-ke-yi-du.html"/>
    <id>https://yexingshusheng.com/2022/05/you-si-xiang-de-ren-du-hen-ji-mo-xing-hao-huan-you-zhong-wen-ke-yi-du.html</id>
    <published>2022-05-25T11:50:03.000Z</published>
    <updated>2022-05-30T01:04:32.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>rf.</p><p>微信公众号｜清川书房</p><p>作者：连清川</p></blockquote><p><strong>声明：转录归档的文章并不代表博主的立场或观点。</strong></p><span id="more"></span><p>我和许多人都讲过这个故事。</p><p>在纽约的时候，有一天，我跟着在《纽约明报》当总编的朋友到他远在宾夕法尼亚的家里。我和他无话不说的，所以我们躲进他的地下室。</p><p>他跟我讲他父亲的故事。墙上贴着父亲的小楷，他曾经是民国时国立武汉大学的中文系教授。</p><p>然后他突然痛哭失声。他自己是学历史的，匹兹堡大学许倬云的高足，他父亲的家学渊源。可是在美国几十年之后，他的儿子，已经连中文都不会说了。</p><p>我沉默良久，无以宽慰。</p><p>没有人能够责怪他，或者他的孩子。我们的人生大概就是这样，你只能被生活推着走，连一点父亲的遗脉都留存不得。</p><p>大约我们都可以被称之为数典忘祖的人。我们这些号称以文字为生的人，写不出一首工整的七言诗，填不了一阙有意义的词，连陆机的骈体文，我读了好多遍都没读懂。</p><p>我们有什么资格谈中文呢？</p><p>许多年前我曾经主理过一份杂志，名字叫做《书城》，职位是编辑总监。想想那个时候沈颢真是小气，连个主编的位置都不肯给我。</p><p>但那大约真是黄金一般的岁月。我去约稿的人，有李欧梵，孙康宜，哈金，陈宁，王德威，还有刘小枫，那个时候他还能写出非常优美的中文。</p><p>我忘了是谁，沈颢还是我，给了这个杂志一个 slogan，叫做 “ 再现文字之美 “。</p><p>但是沈颢写的那篇发刊词真好啊，《有思想的人都很寂寞，幸好还有好文章可读》。</p><p>你当然可以想见那是多美优美的往事。在中文世界里最会写字的人，聚集在一个地方，用最美的语言，讲述那个时代最美好的事情。</p><p>那时我没有别的心思。文字之美就是我内心中的向往。所以我拿文字的尺度，去衡量所有给杂志写稿的人，无论他有多么宏伟的思想，或者显赫的声名。</p><p>最起码我没有辜负沈颢，也没有辜负那个美好的愿望，虽然只有半年的时间。</p><p>我后来在《万象》邂逅冯象，在书店邂逅史景迁，在美国邂逅萨尔曼 · 拉什迪的时候，都是这样的狂喜的心情。</p><p>但是我们大约后来就失落了这所有的一切。不喜不悲，不嗔不怒。在一个末法的时代里，连人类最根本的尊严都可以抛弃的时候，讨论文字的尊严，未免是一件太过奢侈的事情。</p><p>我第一次看见田晓菲的《秋水堂说金瓶梅》的时候，震慑之心无以言表，那是我第一次脱离开情色而看见金瓶梅的慈悲。但是之后我非常坚定的一个认知是：我们所生活的时代，就是金瓶梅的时代。</p><p>所谓的末法，未必是毁丛林，灭僧尼，烧经书。这些肉体上的消灭，在历史上从来不过昙花一现，最终史家都把三武一宗写死了。在过去数十年里，是对欲望的全面放纵，把人性中最基底的丑陋宣扬出来，并且把它正义化。</p><p>我们无休止地追求经济的增长，科技的进步，生活的享用。对于思维的匮乏，文字的糜烂，文人的困顿，毫不在意，纵声讥笑。</p><p>你不能做别的事情，一切的目的，都是肉身的满足。当欲望侵袭内心最底层的细胞的时候，索多玛就成为世间普遍的形态。</p><p>你以为交易可以永恒地进行下去，可是时间行进到今天的时候，浮士德已经开始来收取它所需要的所有利息。</p><p>我们今天所经历的所有一切，都不过是在偿还交易的利息而已。西门庆的清河县一定会一片狼藉的。欲望的翕张从来不会有别的结果。</p><p>文字的毁坏，其实不过是文化毁坏的一个外相而已。社交媒体、粉圈、小粉红、超话、自媒体、战狼，次第而来，把中国的文字一次次地践踏下去，变成了低幼化、敏感化、废话化、失去创造力，只是这场中国人以灵换肉，以灵魂交换繁荣的一个结果。</p><p>因为当你以文字和语言作为交换金钱的时候，只有越无耻，才能越富有。微博、抖音、快手、自媒体，哪一个不是在比赛无耻和恶俗？</p><p>中国人精神追求失去了底线而已。</p><p>王左中右是我的朋友，我当然赞成他所有的判断。中文不是大约的确已经死了。它死了很长时间了，尸体都已经腐烂了。</p><p>但是不知道他是不敢说，还是不愿说。死因就是这场长达 40 年的交易。</p><p>我最近在听山东大学的左传课。晁岳佩老师非常缓慢地，一字一句地讲解《春秋左传》。真美啊。</p><p>不仅仅是文字啊。周公所设立的礼仪制度，圣人在字里行间的幽微之处，那些乡野鄙俗的自我约束，婚丧嫁娶的情感婉转。这是中国人之所以成为中国人的内在理路。</p><p>不是因为这个民族无法伟大，而是因为这个民族束缚重重。</p><p>你看看，哪怕只是松了一点点绑，我们就可以看见 20 岁的年轻人写出美好的柳公权，30 岁的学者谈论魏晋清流，40 岁的专家重拾左传，50 岁的作家进入世界，60 岁的科学家响彻世界。</p><p>我们这一代人肯定是没有希望的了。我们在小的时候没有上过私塾，所以长大了读不懂尚书和文心雕龙；我们也不敢去深入探究圣人的微言大义，更不敢去触碰润之伍豪的奇闻轶事。</p><p>下一代人有没有希望我也不知道。但是看着 90 后 00 后一幅颓唐无知的样子，我对他们基本上鄙夷多过于期待。我很能看见一些有着冀望与迷惘的眼神，但是非常不幸，你们所生长的土壤都带有强大的毒性，你们大约连超越我们的能力都没有。</p><p>所以怎么办呢？如果连下一代都不能期待，我们还能期待什么？</p><p>每个人都喜欢刘项原来不读书这句，但是我其实更喜欢它的前面两句：竹帛烟销帝业虚，关河空锁祖龙居。3000 年了，春秋还在，左传是从墙壁里挖出来的，苏东坡是抹也抹不掉的，纳兰词也会永恒地在那里。</p><p>你我都没有什么好哭的。从历史的角度上说，我们这一代废了，我们的下一代也废了，再废一代好了，总归有一天中国人的孩子会重新捡起左传、苏学士和纳兰容若。小楷会有人写的，圣人会有人传继的。</p><p>借用沈颢的话说，有思想的人都很寂寞，幸好还有中文可以读。</p><p>我们捐此残躯有什么好可惜的，我们原本不过是摆渡的人。我们曾经僭妄地以为我们可以成为渡到彼岸的人，现在想想，成为一个摆渡人也没有什么不好。</p><p>王兄，耐心点。我们只需要做一件事情，告诉孩子们，中国很美，中国文字很美。你们要记住。</p><p>其它的，还有一句话。</p><p>尔曹身与名俱灭，不废江河万古流。</p><p>等着便是。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;rf.&lt;/p&gt;
&lt;p&gt;微信公众号｜清川书房&lt;/p&gt;
&lt;p&gt;作者：连清川&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;声明：转录归档的文章并不代表博主的立场或观点。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="转录归档" scheme="https://yexingshusheng.com/categories/%E8%BD%AC%E5%BD%95%E5%BD%92%E6%A1%A3/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="404文库" scheme="https://yexingshusheng.com/tags/404%E6%96%87%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>克服一次心里恐惧</title>
    <link href="https://yexingshusheng.com/2022/05/ke-fu-yi-ci-xin-li-kong-ju.html"/>
    <id>https://yexingshusheng.com/2022/05/ke-fu-yi-ci-xin-li-kong-ju.html</id>
    <published>2022-05-21T15:00:10.000Z</published>
    <updated>2022-05-23T04:00:58.650Z</updated>
    
    <content type="html"><![CDATA[<p>周末去了一趟游乐园，也算是挑战了一次心理极限，克服了一次心里恐惧——玻璃栈道。</p><blockquote><p>要知道，以前在真空悬廊（东方明珠259米？具体忘了）和其他一些景点都未能顺利完成。</p></blockquote><p>下午有风，但不大，甚是凉爽，整个过程很畅快。</p><p>了解、挑战、掌控自己的生理极限和心理极限，这本是一件极其复杂和艰难的事，每个独立的个体都不一样，但每一次的正向突破都会带来一种极大的正反馈——这感觉就像瞬间完成了DNA的利向突变，再次熟悉和掌控了这具躯体的1‱。</p><blockquote><p>利向突变，指的是基因向着有利于自己以后的生存环境做出的定向突变。</p></blockquote><p>面对未来，虽心怀恐惧，仍满怀期待，下一次的正向突破会在哪里？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;周末去了一趟游乐园，也算是挑战了一次心理极限，克服了一次心里恐惧——玻璃栈道。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要知道，以前在真空悬廊（东方明珠259米？具体忘了）和其他一些景点都未能顺利完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下午有风，但不大，甚是凉爽，</summary>
      
    
    
    
    <category term="日志随笔" scheme="https://yexingshusheng.com/categories/%E6%97%A5%E5%BF%97%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="简记" scheme="https://yexingshusheng.com/tags/%E7%AE%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>修复谷歌&quot;异常流量&quot;错误的6种方法</title>
    <link href="https://yexingshusheng.com/2022/05/xiu-fu-gu-ge-yi-chang-liu-liang-cuo-wu-de-6-chong-fang-fa.html"/>
    <id>https://yexingshusheng.com/2022/05/xiu-fu-gu-ge-yi-chang-liu-liang-cuo-wu-de-6-chong-fang-fa.html</id>
    <published>2022-05-20T03:48:25.000Z</published>
    <updated>2022-05-20T04:12:08.215Z</updated>
    
    <content type="html"><![CDATA[<p>针对个人最近经常遇到的一个问题“为什么会提示流量异常”进行搜索，google和百度针对同一问题的答案完全不同。</p><p>精简转录如下…</p><blockquote><p>rf.<br><a href="https://www.neuf.tv/zh-CN/6-%E7%A7%8D%E6%96%B9%E6%B3%95%E6%9D%A5%E4%BF%AE%E5%A4%8D%E5%BC%82%E5%B8%B8%E7%9A%84-Google-%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E9%94%99%E8%AF%AF%E4%BB%A5%E4%BE%9B%E4%BD%BF%E7%94%A8">修复谷歌”异常流量”错误的6种方法</a></p></blockquote><span id="more"></span><p>原因：</p><ul><li>短时间内研究太多</li><li>使用公用电脑（多台设备共享同一个IP）</li><li>使用 VPN 连接</li><li>第三方扩展</li><li>自动搜索工具或机器人</li><li>恶意脚本或恶意软件</li></ul><p>解决：</p><ul><li>解决验证码，“我不是机器人”<ul><li>插件<a href="https://chrome.google.com/webstore/detail/buster-captcha-solver-for/mpbjkejclgfgadiemmefgebjfooflfhl?utm_source=chrome-ntp-icon">Buster: Captcha Solver for Humans</a>【跳过ReCAPTCHA】太久不更新，也不知道有效没</li></ul></li><li>断开与 VPN 的连接</li><li>使用垃圾机器人等自动化研究工具时</li><li>扫描恶意软件</li><li>检查浏览器扩展<ul><li>Chrome 用户可以访问 <strong>参数</strong> &gt; <strong>进度</strong> &gt; <strong>重置和</strong> <strong>网络游戏者</strong>，并按“将设置重置为原始默认值”。 它会将所有设置和更改重置为其默认值。</li></ul></li><li>重启设备、路由器</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;针对个人最近经常遇到的一个问题“为什么会提示流量异常”进行搜索，google和百度针对同一问题的答案完全不同。&lt;/p&gt;
&lt;p&gt;精简转录如下…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rf.&lt;br&gt;&lt;a href=&quot;https://www.neuf.tv/zh-CN/6-%E7%A7%8D%E6%96%B9%E6%B3%95%E6%9D%A5%E4%BF%AE%E5%A4%8D%E5%BC%82%E5%B8%B8%E7%9A%84-Google-%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%B5%81%E9%87%8F%E9%94%99%E8%AF%AF%E4%BB%A5%E4%BE%9B%E4%BD%BF%E7%94%A8&quot;&gt;修复谷歌”异常流量”错误的6种方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://yexingshusheng.com/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="谷歌" scheme="https://yexingshusheng.com/tags/%E8%B0%B7%E6%AD%8C/"/>
    
    <category term="google" scheme="https://yexingshusheng.com/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>flutter报错处理-四</title>
    <link href="https://yexingshusheng.com/2022/05/flutter-bao-cuo-chu-li-si.html"/>
    <id>https://yexingshusheng.com/2022/05/flutter-bao-cuo-chu-li-si.html</id>
    <published>2022-05-19T09:31:19.000Z</published>
    <updated>2022-05-20T03:37:51.142Z</updated>
    
    <content type="html"><![CDATA[<p>将 flutter 2.10.5 升级到 3.0.0 ，之后<a href="https://guides.cocoapods.org/using/getting-started.html#installation">根据提示</a>升级 CocoaPods，省流提示命令：<code>sudo gem install cocoapods</code>。</p><p>意外地解决了之前的遗留问题：<a href="#target1">HTTP Host Availability</a>，又出现了新的官方问题：</p><ul><li><a href="#target2">Warning: Operand of null-aware operation ‘!’ has type ‘WidgetsBinding’ which excludes null.</a></li></ul><p>详细如下…</p><span id="more"></span><h3 id="HTTP-Host-Availability"><a href="#HTTP-Host-Availability" class="headerlink" title="HTTP Host Availability"></a><a name="target7">HTTP Host Availability</a></h3><p>升级前：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor -v</span><br><span class="line">[✓] Flutter (Channel stable, 2.10.5, on macOS 12.4 21F79 darwin-x64, locale zh-Hans-CN)</span><br><span class="line">    • Flutter version 2.10.5 at /Users/guanguan/Applications/flutter</span><br><span class="line">    • Upstream repository https://github.com/flutter/flutter.git</span><br><span class="line">    • Framework revision 5464c5bac7 (4 周前), 2022-04-18 09:55:37 -0700</span><br><span class="line">    • Engine revision 57d3bac3dd</span><br><span class="line">    • Dart version 2.16.2</span><br><span class="line">    • DevTools version 2.9.2</span><br><span class="line">    • Pub download mirror https://pub.flutter-io.cn</span><br><span class="line">    • Flutter download mirror https://storage.flutter-io.cn</span><br><span class="line"></span><br><span class="line">[✓] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version 29.0.2)</span><br><span class="line">    • Android SDK at /Users/guanguan/Library/Android/sdk</span><br><span class="line">    • Platform android-31, build-tools 29.0.2</span><br><span class="line">    • Java binary at: /Applications/Android Studio.app/Contents/jre/Contents/Home/bin/java</span><br><span class="line">    • Java version OpenJDK Runtime Environment (build 11.0.12+0-b1504.28-7817840)</span><br><span class="line">    • All Android licenses accepted.</span><br><span class="line"></span><br><span class="line">[✓] Xcode - develop <span class="keyword">for</span> iOS and macOS (Xcode 13.4)</span><br><span class="line">    • Xcode at /Applications/Xcode.app/Contents/Developer</span><br><span class="line">    • CocoaPods version 1.10.1</span><br><span class="line"></span><br><span class="line">[✓] Chrome - develop <span class="keyword">for</span> the web</span><br><span class="line">    • Chrome at /Applications/Google Chrome.app/Contents/MacOS/Google Chrome</span><br><span class="line"></span><br><span class="line">[✓] Android Studio (version 2021.2)</span><br><span class="line">    • Android Studio at /Applications/Android Studio.app/Contents</span><br><span class="line">    • Flutter plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/9212-flutter</span><br><span class="line">    • Dart plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/6351-dart</span><br><span class="line">    • Java version OpenJDK Runtime Environment (build 11.0.12+0-b1504.28-7817840)</span><br><span class="line"></span><br><span class="line">[✓] IntelliJ IDEA Ultimate Edition (version 2021.1.1)</span><br><span class="line">    • IntelliJ at /Applications/IntelliJ IDEA.app</span><br><span class="line">    • Flutter plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/9212-flutter</span><br><span class="line">    • Dart plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/6351-dart</span><br><span class="line"></span><br><span class="line">[✓] VS Code (version 1.67.1)</span><br><span class="line">    • VS Code at /Applications/Visual Studio Code.app/Contents</span><br><span class="line">    • Flutter extension version 3.40.0</span><br><span class="line"></span><br><span class="line">[✓] Connected device (2 available)</span><br><span class="line">    • Android SDK built <span class="keyword">for</span> x86 (mobile) • emulator-5554 • android-x86    • Android 8.0.0 (API 26) (emulator)</span><br><span class="line">    • Chrome (web)                       • chrome        • web-javascript • Google Chrome 101.0.4951.64</span><br><span class="line"></span><br><span class="line">[!] HTTP Host Availability</span><br><span class="line">    ✗ HTTP host https://maven.google.com/ is not reachable. Reason: An error occurred <span class="keyword">while</span> checking the HTTP host: Operation</span><br><span class="line">      timed out</span><br><span class="line"></span><br><span class="line">! Doctor found issues <span class="keyword">in</span> 1 category.</span><br></pre></td></tr></table></figure><p>升级后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">Upgrading Flutter to 3.0.0 from 2.10.5 <span class="keyword">in</span> /Users/guanguan/Applications/flutter...</span><br><span class="line">Downloading Darwin x64 Dart SDK from Flutter engine d1b9a6938ad77326ac3a94d92bbc77933ed829ed...</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line"></span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class="line">  0  205M    0 1497k    0     0  1186k      0  0:02:57  0:00:01  0:02:56 1196k</span><br><span class="line">  2  205M    2 4296k    0     0  1898k      0  0:01:51  0:00:02  0:01:49 1906k</span><br><span class="line">  3  205M    3 7370k    0     0  2262k      0  0:01:33  0:00:03  0:01:30 2269k</span><br><span class="line">  4  205M    4  9.8M    0     0  2364k      0  0:01:29  0:00:04  0:01:25 2370k</span><br><span class="line">  6  205M    6 12.4M    0     0  2436k      0  0:01:26  0:00:05  0:01:21 2558k</span><br><span class="line">  7  205M    7 15.2M    0     0  2489k      0  0:01:24  0:00:06  0:01:18 2818k</span><br><span class="line">  8  205M    8 17.8M    0     0  2524k      0  0:01:23  0:00:07  0:01:16 2809k</span><br><span class="line">  9  205M    9 20.2M    0     0  2516k      0  0:01:23  0:00:08  0:01:15 2681k</span><br><span class="line"> 10  205M   10 22.5M    0     0  2494k      0  0:01:24  0:00:09  0:01:15 2605k</span><br><span class="line"> 12  205M   12 24.8M    0     0  2481k      0  0:01:24  0:00:10  0:01:14 2529k</span><br><span class="line"> 13  205M   13 27.0M    0     0  2463k      0  0:01:25  0:00:11  0:01:14 2430k</span><br><span class="line"> 14  205M   14 29.8M    0     0  2496k      0  0:01:24  0:00:12  0:01:12 2455k</span><br><span class="line"> 15  205M   15 32.1M    0     0  2484k      0  0:01:24  0:00:13  0:01:11 2430k</span><br><span class="line"> 16  205M   16 34.3M    0     0  2469k      0  0:01:25  0:00:14  0:01:11 2421k</span><br><span class="line"> 17  205M   17 36.7M    0     0  2470k      0  0:01:25  0:00:15  0:01:10 2446k</span><br><span class="line"> 18  205M   18 38.2M    0     0  2412k      0  0:01:27  0:00:16  0:01:11 2299k</span><br><span class="line"> 20  205M   20 41.1M    0     0  2446k      0  0:01:26  0:00:17  0:01:09 2323k</span><br><span class="line"> 21  205M   21 43.7M    0     0  2456k      0  0:01:25  0:00:18  0:01:07 2381k</span><br><span class="line"> 22  205M   22 46.6M    0     0  2483k      0  0:01:24  0:00:19  0:01:05 2525k</span><br><span class="line"> 23  205M   23 49.4M    0     0  2498k      0  0:01:24  0:00:20  0:01:04 2583k</span><br><span class="line"> 25  205M   25 52.2M    0     0  2512k      0  0:01:23  0:00:21  0:01:02 2834k</span><br><span class="line"> 26  205M   26 54.5M    0     0  2510k      0  0:01:23  0:00:22  0:01:01 2730k</span><br><span class="line"> 27  205M   27 57.3M    0     0  2524k      0  0:01:23  0:00:23  0:01:00 2775k</span><br><span class="line"> 28  205M   28 59.7M    0     0  2521k      0  0:01:23  0:00:24  0:00:59 2665k</span><br><span class="line"> 30  205M   30 62.1M    0     0  2518k      0  0:01:23  0:00:25  0:00:58 2600k</span><br><span class="line"> 31  205M   31 65.5M    0     0  2557k      0  0:01:22  0:00:26  0:00:56 2749k</span><br><span class="line"> 33  205M   33 68.1M    0     0  2561k      0  0:01:22  0:00:27  0:00:55 2789k</span><br><span class="line"> 34  205M   34 70.6M    0     0  2560k      0  0:01:22  0:00:28  0:00:54 2725k</span><br><span class="line"> 35  205M   35 73.2M    0     0  2566k      0  0:01:22  0:00:29  0:00:53 2784k</span><br><span class="line"> 36  205M   36 75.2M    0     0  2516k      0  0:01:23  0:00:30  0:00:53 2507k</span><br><span class="line"> 36  205M   36 75.8M    0     0  2486k      0  0:01:24  0:00:31  0:00:53 2113k</span><br><span class="line"> 37  205M   37 77.2M    0     0  2452k      0  0:01:25  0:00:32  0:00:53 1857k</span><br><span class="line"> 38  205M   38 79.8M    0     0  2458k      0  0:01:25  0:00:33  0:00:52 1886k</span><br><span class="line"> 40  205M   40 82.4M    0     0  2464k      0  0:01:25  0:00:34  0:00:51 1869k</span><br><span class="line"> 41  205M   41 84.7M    0     0  2450k      0  0:01:26  0:00:35  0:00:51 2030k</span><br><span class="line"> 42  205M   42 87.6M    0     0  2475k      0  0:01:25  0:00:36  0:00:49 2407k</span><br><span class="line"> 43  205M   43 90.3M    0     0  2483k      0  0:01:24  0:00:37  0:00:47 2682k</span><br><span class="line"> 45  205M   45 93.5M    0     0  2504k      0  0:01:24  0:00:38  0:00:46 2809k</span><br><span class="line"> 46  205M   46 96.1M    0     0  2507k      0  0:01:24  0:00:39  0:00:45 2804k</span><br><span class="line"> 48  205M   48 99.1M    0     0  2522k      0  0:01:23  0:00:40  0:00:43 3043k</span><br><span class="line"> 49  205M   49  101M    0     0  2527k      0  0:01:23  0:00:41  0:00:42 2908k</span><br><span class="line"> 50  205M   50  104M    0     0  2539k      0  0:01:23  0:00:42  0:00:41 2958k</span><br><span class="line"> 52  205M   52  107M    0     0  2541k      0  0:01:22  0:00:43  0:00:39 2825k</span><br><span class="line"> 53  205M   53  110M    0     0  2545k      0  0:01:22  0:00:44  0:00:38 2845k</span><br><span class="line"> 54  205M   54  113M    0     0  2556k      0  0:01:22  0:00:45  0:00:37 2829k</span><br><span class="line"> 56  205M   56  115M    0     0  2566k      0  0:01:22  0:00:46  0:00:36 2883k</span><br><span class="line"> 57  205M   57  118M    0     0  2567k      0  0:01:22  0:00:47  0:00:35 2800k</span><br><span class="line"> 58  205M   58  121M    0     0  2577k      0  0:01:21  0:00:48  0:00:33 2888k</span><br><span class="line"> 60  205M   60  124M    0     0  2585k      0  0:01:21  0:00:49  0:00:32 2939k</span><br><span class="line">  61  205M   61  126M    0     0  2582k      0  0:01:21  0:00:50  0:00:31 2823k</span><br><span class="line">             62  205M   62  128M    0     0  2574k      0  0:01:21  0:00:51  0:00:30 2644k</span><br><span class="line">            64  205M   64  131M    0     0  2585k      0  0:01:21  0:00:52  0:00:29 2761k</span><br><span class="line"> 65  205M   65  134M    0     0  2590k      0  0:01:21  0:00:53  0:00:28 2712k</span><br><span class="line"> 67  205M   67  138M    0     0  2605k      0  0:01:20  0:00:54  0:00:26 2803k</span><br><span class="line"> 68  205M   68  141M    0     0  2621k      0  0:01:20  0:00:55  0:00:25 3007k</span><br><span class="line"> 70  205M   70  144M    0     0  2631k      0  0:01:20  0:00:56  0:00:24 3218k</span><br><span class="line"> 71  205M   71  147M    0     0  2641k      0  0:01:19  0:00:57  0:00:22 3223k</span><br><span class="line"> 73  205M   73  150M    0     0  2654k      0  0:01:19  0:00:58  0:00:21 3342k</span><br><span class="line"> 74  205M   74  154M    0     0  2667k      0  0:01:19  0:00:59  0:00:20 3333k</span><br><span class="line"> 76  205M   76  157M    0     0  2679k      0  0:01:18  0:01:00  0:00:18 3322k</span><br><span class="line"> 78  205M   78  161M    0     0  2695k      0  0:01:18  0:01:01  0:00:17 3413k</span><br><span class="line"> 79  205M   79  163M    0     0  2692k      0  0:01:18  0:01:02  0:00:16 3277k</span><br><span class="line"> 81  205M   81  167M    0     0  2704k      0  0:01:17  0:01:03  0:00:14 3279k</span><br><span class="line"> 82  205M   82  170M    0     0  2720k      0  0:01:17  0:01:04  0:00:13 3347k</span><br><span class="line"> 83  205M   83  172M    0     0  2714k      0  0:01:17  0:01:05  0:00:12 3136k</span><br><span class="line"> 85  205M   85  176M    0     0  2725k      0  0:01:17  0:01:06  0:00:11 3102k</span><br><span class="line"> 87  205M   87  179M    0     0  2733k      0  0:01:17  0:01:07  0:00:10 3238k</span><br><span class="line"> 88  205M   88  183M    0     0  2746k      0  0:01:16  0:01:08  0:00:08 3284k</span><br><span class="line"> 90  205M   90  186M    0     0  2758k      0  0:01:16  0:01:09  0:00:07 3254k</span><br><span class="line"> 91  205M   91  189M    0     0  2758k      0  0:01:16  0:01:10  0:00:06 3328k</span><br><span class="line"> 93  205M   93  192M    0     0  2763k      0  0:01:16  0:01:11  0:00:05 3263k</span><br><span class="line"> 95  205M   95  195M    0     0  2776k      0  0:01:15  0:01:12  0:00:03 3356k</span><br><span class="line"> 96  205M   96  198M    0     0  2780k      0  0:01:15  0:01:13  0:00:02 3242k</span><br><span class="line"> 97  205M   97  201M    0     0  2778k      0  0:01:15  0:01:14  0:00:01 3057k</span><br><span class="line"> 99  205M   99  203M    0     0  2774k      0  0:01:15  0:01:15 --:--:-- 3007k</span><br><span class="line">100  205M  100  205M    0     0  2781k      0  0:01:15  0:01:15 --:--:-- 3064k</span><br><span class="line">Building flutter tool...</span><br><span class="line"></span><br><span class="line">Upgrading engine...</span><br><span class="line">Flutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this <span class="built_in">source</span>!</span><br><span class="line">Downloading Material fonts...                                    1,130ms</span><br><span class="line">Downloading android-arm-profile/darwin-x64 tools...              1,245ms</span><br><span class="line">Downloading android-arm-release/darwin-x64 tools...              2,121ms</span><br><span class="line">Downloading android-arm64-profile/darwin-x64 tools...            1,506ms</span><br><span class="line">Downloading android-arm64-release/darwin-x64 tools...              22.5s</span><br><span class="line">Downloading android-x64-profile/darwin-x64 tools...              2,979ms</span><br><span class="line">Downloading android-x64-release/darwin-x64 tools...              1,268ms</span><br><span class="line">Downloading android-x86 tools...                                    4.1s</span><br><span class="line">Downloading android-x64 tools...                                    4.9s</span><br><span class="line">Downloading android-arm tools...                                    4.2s</span><br><span class="line">Downloading android-arm-profile tools...                         2,765ms</span><br><span class="line">Downloading android-arm-release tools...                         1,596ms</span><br><span class="line">Downloading android-arm64 tools...                                  4.1s</span><br><span class="line">Downloading android-arm64-profile tools...                       2,656ms</span><br><span class="line">Downloading android-arm64-release tools...                       1,451ms</span><br><span class="line">Downloading android-x64-profile tools...                         2,992ms</span><br><span class="line">Downloading android-x64-release tools...                         1,652ms</span><br><span class="line">Downloading android-x86-jit-release tools...                     2,803ms</span><br><span class="line">Downloading ios tools...                                           20.2s</span><br><span class="line">Downloading ios-profile tools...                                   15.4s</span><br><span class="line">Downloading ios-release tools...                                   90.0s</span><br><span class="line">Downloading Web SDK...                                             11.2s</span><br><span class="line">Downloading CanvasKit...                                         1,934ms</span><br><span class="line">Downloading darwin-x64/FlutterMacOS.framework tools...              8.4s</span><br><span class="line">Downloading darwin-x64/gen_snapshot tools...                        3.1s</span><br><span class="line">Downloading darwin-x64-profile/FlutterMacOS.framework tools...         5.0s</span><br><span class="line">Downloading darwin-x64-profile tools...                          1,208ms</span><br><span class="line">Downloading darwin-x64-profile/gen_snapshot tools...             2,256ms</span><br><span class="line">Downloading darwin-x64-release/FlutterMacOS.framework tools...         3.6s</span><br><span class="line">Downloading darwin-x64-release tools...                          1,146ms</span><br><span class="line">Downloading darwin-x64-release/gen_snapshot tools...             2,208ms</span><br><span class="line"></span><br><span class="line">Flutter 3.0.0 • channel stable • https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision ee4e09cce0 (9 天前) • 2022-05-09 16:45:18 -0700</span><br><span class="line">Engine • revision d1b9a6938a</span><br><span class="line">Tools • Dart 2.17.0 • DevTools 2.12.2</span><br><span class="line"></span><br><span class="line">Running flutter doctor...</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, 3.0.0, on macOS 12.4 21F79 darwin-x64, locale zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version 29.0.2)</span><br><span class="line">[!] Xcode - develop <span class="keyword">for</span> iOS and macOS (Xcode 13.4)</span><br><span class="line">    ! CocoaPods 1.10.1 out of <span class="built_in">date</span> (1.11.0 is recommended).</span><br><span class="line">        CocoaPods is used to retrieve the iOS and macOS platform side<span class="string">&#x27;s plugin code that responds to your plugin usage on the Dart side.</span></span><br><span class="line"><span class="string">        Without CocoaPods, plugins will not work on iOS or macOS.</span></span><br><span class="line"><span class="string">        For more info, see https://flutter.dev/platform-plugins</span></span><br><span class="line"><span class="string">      To upgrade see https://guides.cocoapods.org/using/getting-started.html#installation for instructions.</span></span><br><span class="line"><span class="string">[✓] Chrome - develop for the web</span></span><br><span class="line"><span class="string">[✓] Android Studio (version 2021.2)</span></span><br><span class="line"><span class="string">[✓] IntelliJ IDEA Ultimate Edition (version 2021.1.1)</span></span><br><span class="line"><span class="string">[✓] VS Code (version 1.67.1)</span></span><br><span class="line"><span class="string">[✓] Connected device (3 available)</span></span><br><span class="line"><span class="string">[✓] HTTP Host Availability</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">! Doctor found issues in 1 category.</span></span><br></pre></td></tr></table></figure><p><a href="https://guides.cocoapods.org/using/getting-started.html#installation">根据提示</a>，升级Cocoapods：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br><span class="line">Password:</span><br><span class="line">Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0</span><br><span class="line">Fetching addressable-2.8.0.gem</span><br><span class="line">Fetching cocoapods-core-1.11.3.gem</span><br><span class="line">Fetching molinillo-0.8.0.gem</span><br><span class="line">Fetching rexml-3.2.5.gem</span><br><span class="line">Fetching xcodeproj-1.21.0.gem</span><br><span class="line">Fetching cocoapods-1.11.3.gem</span><br><span class="line">Successfully installed addressable-2.8.0</span><br><span class="line">Successfully installed cocoapods-core-1.11.3</span><br><span class="line">Successfully installed molinillo-0.8.0</span><br><span class="line">Successfully installed rexml-3.2.5</span><br><span class="line">Successfully installed xcodeproj-1.21.0</span><br><span class="line">Successfully installed cocoapods-1.11.3</span><br><span class="line">Parsing documentation <span class="keyword">for</span> addressable-2.8.0</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> addressable-2.8.0</span><br><span class="line">Parsing documentation <span class="keyword">for</span> cocoapods-core-1.11.3</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> cocoapods-core-1.11.3</span><br><span class="line">Parsing documentation <span class="keyword">for</span> molinillo-0.8.0</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> molinillo-0.8.0</span><br><span class="line">Parsing documentation <span class="keyword">for</span> rexml-3.2.5</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> rexml-3.2.5</span><br><span class="line">Parsing documentation <span class="keyword">for</span> xcodeproj-1.21.0</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> xcodeproj-1.21.0</span><br><span class="line">Parsing documentation <span class="keyword">for</span> cocoapods-1.11.3</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> cocoapods-1.11.3</span><br><span class="line">Done installing documentation <span class="keyword">for</span> addressable, cocoapods-core, molinillo, rexml, xcodeproj, cocoapods after 5 seconds</span><br><span class="line">6 gems installed</span><br></pre></td></tr></table></figure><p>再次查看flutter环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor -v</span><br><span class="line">[✓] Flutter (Channel stable, 3.0.0, on macOS 12.4 21F79 darwin-x64, locale zh-Hans-CN)</span><br><span class="line">    • Flutter version 3.0.0 at /Users/guanguan/Applications/flutter</span><br><span class="line">    • Upstream repository https://github.com/flutter/flutter.git</span><br><span class="line">    • Framework revision ee4e09cce0 (9 天前), 2022-05-09 16:45:18 -0700</span><br><span class="line">    • Engine revision d1b9a6938a</span><br><span class="line">    • Dart version 2.17.0</span><br><span class="line">    • DevTools version 2.12.2</span><br><span class="line">    • Pub download mirror https://pub.flutter-io.cn</span><br><span class="line">    • Flutter download mirror https://storage.flutter-io.cn</span><br><span class="line"></span><br><span class="line">[✓] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version 29.0.2)</span><br><span class="line">    • Android SDK at /Users/guanguan/Library/Android/sdk</span><br><span class="line">    • Platform android-31, build-tools 29.0.2</span><br><span class="line">    • Java binary at: /Applications/Android Studio.app/Contents/jre/Contents/Home/bin/java</span><br><span class="line">    • Java version OpenJDK Runtime Environment (build 11.0.12+0-b1504.28-7817840)</span><br><span class="line">    • All Android licenses accepted.</span><br><span class="line"></span><br><span class="line">[✓] Xcode - develop <span class="keyword">for</span> iOS and macOS (Xcode 13.4)</span><br><span class="line">    • Xcode at /Applications/Xcode.app/Contents/Developer</span><br><span class="line">    • CocoaPods version 1.11.3</span><br><span class="line"></span><br><span class="line">[✓] Chrome - develop <span class="keyword">for</span> the web</span><br><span class="line">    • Chrome at /Applications/Google Chrome.app/Contents/MacOS/Google Chrome</span><br><span class="line"></span><br><span class="line">[✓] Android Studio (version 2021.2)</span><br><span class="line">    • Android Studio at /Applications/Android Studio.app/Contents</span><br><span class="line">    • Flutter plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/9212-flutter</span><br><span class="line">    • Dart plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/6351-dart</span><br><span class="line">    • Java version OpenJDK Runtime Environment (build 11.0.12+0-b1504.28-7817840)</span><br><span class="line"></span><br><span class="line">[✓] IntelliJ IDEA Ultimate Edition (version 2021.1.1)</span><br><span class="line">    • IntelliJ at /Applications/IntelliJ IDEA.app</span><br><span class="line">    • Flutter plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/9212-flutter</span><br><span class="line">    • Dart plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/6351-dart</span><br><span class="line"></span><br><span class="line">[✓] VS Code (version 1.67.1)</span><br><span class="line">    • VS Code at /Applications/Visual Studio Code.app/Contents</span><br><span class="line">    • Flutter extension version 3.40.0</span><br><span class="line"></span><br><span class="line">[✓] Connected device (3 available)</span><br><span class="line">    • Android SDK built <span class="keyword">for</span> x86 (mobile) • emulator-5554 • android-x86    • Android 8.0.0 (API 26) (emulator)</span><br><span class="line">    • macOS (desktop)                    • macos         • darwin-x64     • macOS 12.4 21F79 darwin-x64</span><br><span class="line">    • Chrome (web)                       • chrome        • web-javascript • Google Chrome 101.0.4951.64</span><br><span class="line"></span><br><span class="line">[✓] HTTP Host Availability</span><br><span class="line">    • All required HTTP hosts are available</span><br><span class="line"></span><br><span class="line">• No issues found!</span><br></pre></td></tr></table></figure><p>HTTP Host Availability 问题解决！</p><h3 id="Warning-Operand-of-null-aware-operation-‘-’-has-type-‘WidgetsBinding’-which-excludes-null"><a href="#Warning-Operand-of-null-aware-operation-‘-’-has-type-‘WidgetsBinding’-which-excludes-null" class="headerlink" title="Warning: Operand of null-aware operation ‘!’ has type ‘WidgetsBinding’ which excludes null."></a><a name="target2">Warning: Operand of null-aware operation ‘!’ has type ‘WidgetsBinding’ which excludes null.</a></h3><p>这是更新 flutter 到3.0 出现的新问题，解决方案参考官网：</p><blockquote><p>rf.</p><p><a href="https://docs.flutter.dev/development/tools/sdk/release-notes/release-notes-3.0.0#if-you-see-warnings-about-bindings">https://docs.flutter.dev/development/tools/sdk/release-notes/release-notes-3.0.0#if-you-see-warnings-about-bindings</a></p><p><a href="https://github.com/daohoangson/flutter_widget_from_html/issues/769">Warning: Operand of null-aware operation ‘?.’ has type ‘WidgetsBinding’ which excludes null #769</a></p><p><a href="https://github.com/flutter/flutter/issues/103561#"> ‘WidgetsBinding’ runtime warnings using 3.0.0 stable release #103561</a>【官方推荐】</p></blockquote><p>详细报错：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">Running <span class="string">&quot;flutter pub get&quot;</span> <span class="keyword">in</span> app...</span><br><span class="line">Launching lib/main.dart <span class="keyword">on</span> Android SDK built <span class="keyword">for</span> x86 <span class="keyword">in</span> debug mode...</span><br><span class="line">Running Gradle task <span class="string">&#x27;assembleDebug&#x27;</span>...</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/cached_network_image<span class="number">-3.2</span><span class="number">.0</span>/lib/src/image_provider/cached_network_image_provider.dart:<span class="number">109</span>:<span class="number">29</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;?.&#x27;</span> has type <span class="string">&#x27;PaintingBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;PaintingBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/painting/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/painting/binding.dart&#x27;</span>).</span><br><span class="line">      () =&gt; PaintingBinding.instance?.imageCache?.evict(key),</span><br><span class="line">                            ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/cached_network_image<span class="number">-3.2</span><span class="number">.0</span>/lib/src/image_provider/multi_image_stream_completer.dart:<span class="number">152</span>:<span class="number">22</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;?.&#x27;</span> has type <span class="string">&#x27;SchedulerBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;SchedulerBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/scheduler/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/scheduler/binding.dart&#x27;</span>).</span><br><span class="line">    SchedulerBinding.instance?.scheduleFrameCallback(_handleAppFrame);</span><br><span class="line">                     ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_swiper_plus<span class="number">-2.0</span><span class="number">.4</span>/lib/src/custom_layout.dart:<span class="number">32</span>:<span class="number">20</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;WidgetsBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;WidgetsBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/widgets/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;</span>).</span><br><span class="line">    WidgetsBinding.instance!.addPostFrameCallback(_getSize);</span><br><span class="line">                   ^</span><br><span class="line">lib/widget/animation_cart.dart:<span class="number">39</span>:<span class="number">20</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;WidgetsBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;WidgetsBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/widgets/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;</span>).</span><br><span class="line">    WidgetsBinding.instance!.addPostFrameCallback((_) &#123;</span><br><span class="line">                   ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_swiper_plus<span class="number">-2.0</span><span class="number">.4</span>/lib/src/transformer_page_view/transformer_page_view.dart:<span class="number">516</span>:<span class="number">22</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;WidgetsBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;WidgetsBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/widgets/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;</span>).</span><br><span class="line">      WidgetsBinding.instance!.addPostFrameCallback(_onGetSize);</span><br><span class="line">                     ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_swiper_plus<span class="number">-2.0</span><span class="number">.4</span>/lib/src/transformer_page_view/transformer_page_view.dart:<span class="number">533</span>:<span class="number">22</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;WidgetsBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;WidgetsBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/widgets/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;</span>).</span><br><span class="line">      WidgetsBinding.instance!.addPostFrameCallback(_onGetSize);</span><br><span class="line">                     ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/<span class="keyword">get</span><span class="number">-4.6</span><span class="number">.1</span>/lib/get_state_manager/src/rx_flutter/rx_disposable.dart:<span class="number">20</span>:<span class="number">22</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;?.&#x27;</span> has type <span class="string">&#x27;SchedulerBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;SchedulerBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/scheduler/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/scheduler/binding.dart&#x27;</span>).</span><br><span class="line">    SchedulerBinding.instance?.addPostFrameCallback((_) =&gt; onReady());</span><br><span class="line">                     ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/<span class="keyword">get</span><span class="number">-4.6</span><span class="number">.1</span>/lib/get_state_manager/src/rx_flutter/rx_notifier.dart:<span class="number">130</span>:<span class="number">22</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;?.&#x27;</span> has type <span class="string">&#x27;SchedulerBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;SchedulerBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/scheduler/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/scheduler/binding.dart&#x27;</span>).</span><br><span class="line">    SchedulerBinding.instance?.addPostFrameCallback((_) =&gt; onReady());</span><br><span class="line">                     ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/<span class="keyword">get</span><span class="number">-4.6</span><span class="number">.1</span>/lib/get_state_manager/src/simple/get_controllers.dart:<span class="number">90</span>:<span class="number">20</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;WidgetsBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;WidgetsBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/widgets/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;</span>).</span><br><span class="line">    WidgetsBinding.instance!.addObserver(<span class="keyword">this</span>);</span><br><span class="line">                   ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/<span class="keyword">get</span><span class="number">-4.6</span><span class="number">.1</span>/lib/get_state_manager/src/simple/get_controllers.dart:<span class="number">96</span>:<span class="number">20</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;WidgetsBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;WidgetsBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/widgets/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;</span>).</span><br><span class="line">    WidgetsBinding.instance!.removeObserver(<span class="keyword">this</span>);</span><br><span class="line">                   ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/<span class="keyword">get</span><span class="number">-4.6</span><span class="number">.1</span>/lib/get_navigation/src/extension_navigation.dart:<span class="number">357</span>:<span class="number">24</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;SchedulerBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;SchedulerBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/scheduler/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/scheduler/binding.dart&#x27;</span>).</span><br><span class="line">      SchedulerBinding.instance!.addPostFrameCallback((_) &#123;</span><br><span class="line">                       ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/<span class="keyword">get</span><span class="number">-4.6</span><span class="number">.1</span>/lib/get_navigation/src/extension_navigation.dart:<span class="number">468</span>:<span class="number">24</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;SchedulerBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;SchedulerBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/scheduler/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/scheduler/binding.dart&#x27;</span>).</span><br><span class="line">      SchedulerBinding.instance!.addPostFrameCallback((_) &#123;</span><br><span class="line">                       ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/<span class="keyword">get</span><span class="number">-4.6</span><span class="number">.1</span>/lib/get_navigation/src/snackbar/snackbar.dart:<span class="number">452</span>:<span class="number">22</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;SchedulerBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;SchedulerBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/scheduler/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/scheduler/binding.dart&#x27;</span>).</span><br><span class="line">    SchedulerBinding.instance!.addPostFrameCallback(</span><br><span class="line">                     ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/<span class="keyword">get</span><span class="number">-4.6</span><span class="number">.1</span>/lib/get_navigation/src/router_report.dart:<span class="number">53</span>:<span class="number">22</span>: Warning: Operand of <span class="keyword">null</span>-aware operation <span class="string">&#x27;!&#x27;</span> has type <span class="string">&#x27;WidgetsBinding&#x27;</span> which excludes <span class="keyword">null</span>.</span><br><span class="line"> - <span class="string">&#x27;WidgetsBinding&#x27;</span> <span class="keyword">is</span> from <span class="string">&#x27;package:flutter/src/widgets/binding.dart&#x27;</span> (<span class="string">&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;</span>).</span><br><span class="line">      WidgetsBinding.instance!.addPostFrameCallback((_) &#123;</span><br><span class="line">                     ^</span><br></pre></td></tr></table></figure><p>根据官方推荐<code>dart fix --apply</code>，运行程序，报错信息只剩下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Performing hot reload...</span><br><span class="line">Syncing files to device Android SDK built for x86...</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_swiper_plus-2.0.4/lib/src/custom_layout.dart:32:20: Warning: Operand of null-aware operation &#x27;!&#x27; has type &#x27;WidgetsBinding&#x27; which excludes null.</span><br><span class="line"> - &#x27;WidgetsBinding&#x27; is from &#x27;package:flutter/src/widgets/binding.dart&#x27; (&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;).</span><br><span class="line">    WidgetsBinding.instance!.addPostFrameCallback(_getSize);</span><br><span class="line">                   ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_swiper_plus-2.0.4/lib/src/transformer_page_view/transformer_page_view.dart:516:22: Warning: Operand of null-aware operation &#x27;!&#x27; has type &#x27;WidgetsBinding&#x27; which excludes null.</span><br><span class="line"> - &#x27;WidgetsBinding&#x27; is from &#x27;package:flutter/src/widgets/binding.dart&#x27; (&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;).</span><br><span class="line">      WidgetsBinding.instance!.addPostFrameCallback(_onGetSize);</span><br><span class="line">                     ^</span><br><span class="line">../../../Applications/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_swiper_plus-2.0.4/lib/src/transformer_page_view/transformer_page_view.dart:533:22: Warning: Operand of null-aware operation &#x27;!&#x27; has type &#x27;WidgetsBinding&#x27; which excludes null.</span><br><span class="line"> - &#x27;WidgetsBinding&#x27; is from &#x27;package:flutter/src/widgets/binding.dart&#x27; (&#x27;../../../Applications/flutter/packages/flutter/lib/src/widgets/binding.dart&#x27;).</span><br><span class="line">      WidgetsBinding.instance!.addPostFrameCallback(_onGetSize);</span><br><span class="line">                     ^</span><br><span class="line">Reloaded 9 of 1563 libraries in 796ms.</span><br></pre></td></tr></table></figure><p>这里的报错应该就是第三方插件<code>flutter_swiper_plus</code>的缓存问题。</p><blockquote><p>rf.</p><p><a href="https://github.com/flutter/flutter/pull/89451">Clean up the bindings APIs. #89451</a></p><ul><li><p>Make accesses to <code>instance</code> not required <code>!</code>.</p><p>使用 <code>instance</code>不需要<code>!</code>。</p></li></ul></blockquote><p>根据提示的文件及行号，在电脑中找到对应的三个文件的位置，依次修改即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//custom_layout.dart:32:20</span></span><br><span class="line">WidgetsBinding.instance.addPostFrameCallback(_getSize);</span><br><span class="line"><span class="comment">//transformer_page_view.dart:516:22</span></span><br><span class="line">WidgetsBinding.instance.addPostFrameCallback(_onGetSize);</span><br><span class="line"><span class="comment">//transformer_page_view.dart:533:22</span></span><br><span class="line">WidgetsBinding.instance.addPostFrameCallback(_onGetSize);</span><br></pre></td></tr></table></figure><p>至此，解决！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;将 flutter 2.10.5 升级到 3.0.0 ，之后&lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html#installation&quot;&gt;根据提示&lt;/a&gt;升级 CocoaPods，省流提示命令：&lt;code&gt;sudo gem install cocoapods&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;意外地解决了之前的遗留问题：&lt;a href=&quot;#target1&quot;&gt;HTTP Host Availability&lt;/a&gt;，又出现了新的官方问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#target2&quot;&gt;Warning: Operand of null-aware operation ‘!’ has type ‘WidgetsBinding’ which excludes null.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细如下…&lt;/p&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://yexingshusheng.com/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="报错处理" scheme="https://yexingshusheng.com/tags/%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    
    <category term="flutter" scheme="https://yexingshusheng.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>短暂离开社交网络能让你更快乐焦虑更少</title>
    <link href="https://yexingshusheng.com/2022/05/duan-zan-chi-kai-she-jiao-wang-luo-neng-rang-ni-geng-kuai-le-jiao-lu-geng-shao.html"/>
    <id>https://yexingshusheng.com/2022/05/duan-zan-chi-kai-she-jiao-wang-luo-neng-rang-ni-geng-kuai-le-jiao-lu-geng-shao.html</id>
    <published>2022-05-19T01:13:14.000Z</published>
    <updated>2022-05-30T01:05:33.199Z</updated>
    
    <content type="html"><![CDATA[<p>巴斯大学的研究人员在《Cyberpsychology, Behavior, and Social Networking》期刊上<a href="https://www.liebertpub.com/doi/10.1089/cyber.2021.0324">报告了</a>他们做的一个十分简单的实验：研究人员招募了 154 名平均年龄 29.6 岁的志愿者，随机分为停止使用社交媒体（主要为 Facebook、Twitter、Instagram 和 TikTok）一周的干预组和无任何要求的对照组。一周之后，干预组在幸福感、抑郁和焦虑等指标上显著好于对照组。研究人员进一步发现，减少在 Twitter 和 TikTok 上花费的时间能小幅度改善抑郁和焦虑，而完全放弃社交媒体则 <a href="https://www.calnewport.com/blog/2022/05/16/taking-a-break-from-social-media-makes-you-happier-and-less-anxious/">能取得最大的效果</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;巴斯大学的研究人员在《Cyberpsychology, Behavior, and Social Networking》期刊上&lt;a href=&quot;https://www.liebertpub.com/doi/10.1089/cyber.2021.0324&quot;&gt;报告了&lt;/a&gt;他们</summary>
      
    
    
    
    <category term="日志随笔" scheme="https://yexingshusheng.com/categories/%E6%97%A5%E5%BF%97%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="研究报告" scheme="https://yexingshusheng.com/tags/%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>MBTI人格测试</title>
    <link href="https://yexingshusheng.com/2022/05/mbti-ren-ge-ce-shi.html"/>
    <id>https://yexingshusheng.com/2022/05/mbti-ren-ge-ce-shi.html</id>
    <published>2022-05-13T11:52:43.000Z</published>
    <updated>2022-05-30T01:02:17.799Z</updated>
    
    <content type="html"><![CDATA[<p>不记得是翻阅哪篇文章，看到了MBTI人格测试，心血来潮，测试了一下，结果竟然是…</p><span id="more"></span><p>ENFJ，具体来说，应该是ENFJ-A型的。伴侣更适合INFP，因为他们看世界的直觉模式是相同的。和ISFP也会是不错的组合。</p><p>部分结果比较准的原因是，在这方面，相关人士已经做过了大量的研究。</p><p>有人说，MBTI像现代的算命。难道不是吗？🐶（手动狗头保命🤣，勿喷）</p><p>这个分类其实是将4个维度进行了排列组合：</p><table><thead><tr><th align="left">I（内向）- E（外向）</th><th align="left">内向的人在独处时「回血」，在社交时「掉血」，外向的人相反</th></tr></thead><tbody><tr><td align="left">N（直觉）- S（实感）</td><td align="left">衡量人认识世界、处理问题时，偏向于抽象的直觉还是具体的经历</td></tr><tr><td align="left">F（情感）- T（思考）</td><td align="left">讨论人如何做决定，基于多元的价值观还是二元的是非观驱动</td></tr><tr><td align="left">J（判断）- P（感知）</td><td align="left">衡量人与外部的互动方式，倾向于强计划性还是强灵活性</td></tr></tbody></table><p>标签化容易引导自己向对应的方向发展，但如果带来的是一种正向积极的引导，也未尝不可。</p><p><strong>不要迷失自己！</strong></p><p>仅供娱乐！！！最后附上分类图，方便快速查阅：</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/Pvr3FasqXd40dF5RLqf8WuYDdFlf8kskbG4X37Uicn9icJ7QN9hibyxDdCngYZTpP7DK6EW7X54U7YhoBnibvuncpw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="MBTI人格分类"></p><blockquote><p>rf.</p><p>维基百科上的描述：<a href="https://zh.wikipedia.org/zh-tw/ENFJ">https://zh.wikipedia.org/zh-tw/ENFJ</a></p><p>主人公人格的描述：<a href="https://www.16personalities.com/ch/enfj-%E4%BA%BA%E6%A0%BC">https://www.16personalities.com/ch/enfj-%E4%BA%BA%E6%A0%BC</a></p><p>MBTI免费测试网站：<a href="https://www.16personalities.com/ch/%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95">https://www.16personalities.com/ch/%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95</a></p><p>ENFJ-A和ENFJ-T的不同：<a href="https://www.16personalities.com/articles/assertive-protagonist-enfj-a-vs-turbulent-protagonist-enfj-t">https://www.16personalities.com/articles/assertive-protagonist-enfj-a-vs-turbulent-protagonist-enfj-t</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;不记得是翻阅哪篇文章，看到了MBTI人格测试，心血来潮，测试了一下，结果竟然是…&lt;/p&gt;</summary>
    
    
    
    <category term="日志随笔" scheme="https://yexingshusheng.com/categories/%E6%97%A5%E5%BF%97%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="MBTI" scheme="https://yexingshusheng.com/tags/MBTI/"/>
    
    <category term="娱乐消遣" scheme="https://yexingshusheng.com/tags/%E5%A8%B1%E4%B9%90%E6%B6%88%E9%81%A3/"/>
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
  </entry>
  
  <entry>
    <title>flutter状态管理之四大消费者使用分析</title>
    <link href="https://yexingshusheng.com/2022/05/flutter-zhuang-tai-guan-li-zhi-si-da-xiao-fei-zhe-shi-yong-fen-xi.html"/>
    <id>https://yexingshusheng.com/2022/05/flutter-zhuang-tai-guan-li-zhi-si-da-xiao-fei-zhe-shi-yong-fen-xi.html</id>
    <published>2022-05-11T11:27:10.000Z</published>
    <updated>2022-05-16T01:04:33.307Z</updated>
    
    <content type="html"><![CDATA[<p>出于好奇，翻看了一下源码以及源码注释文档，文中仅摘取了注释文档部分。</p><blockquote><p>rf.</p><p><a href="https://www.liujunmin.com/flutter/provider/consumer.html">Flutter Provider状态管理—四种消费者使用分析</a> （文中的例子很详细）</p><p><a href="pub.dev">pub.dev</a></p></blockquote><p>文末，额外对源码注释中涉及到的<a href="#target2">BuildContext</a>部分进行了直译与总结。</p><span id="more"></span><h4 id="Provider-of"><a href="#Provider-of" class="headerlink" title="Provider.of"></a>Provider.of</h4><p><code>Provider.of&lt;T&gt;(context)</code>是<code>Provider</code>为我们提供的静态方法，当我们使用该方法去获取值的时候会返回查找到的最近的<code>T</code>类型的<code>provider</code>给我们，而且也不会遍历整个组件树。</p><blockquote><p>sc.</p><p>provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Tried to listen to a value exposed <span class="keyword">with</span> provider, from outside of the widget tree.</span><br><span class="line"></span><br><span class="line">This <span class="keyword">is</span> likely caused by an event handler (like a button<span class="string">&#x27;s onPressed) that called</span></span><br><span class="line"><span class="string">Provider.of without passing `listen: false`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To fix, write:</span></span><br><span class="line"><span class="string">Provider.of&lt;<span class="subst">$T</span>&gt;(context, listen: false);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It is unsupported because may pointlessly rebuild the widget associated to the</span></span><br><span class="line"><span class="string">event handler, when the widget tree doesn&#x27;</span>t care about the value.</span><br><span class="line"></span><br><span class="line">The context used was: $context</span><br></pre></td></tr></table></figure><p>试图从widget树之外监听一个用provider暴露的值。</p><p>这可能是由一个事件处理程序（比如按钮的onPressed）在没有传递<code>Listen:false</code>的情况下调用<code>Provider.of</code>造成的。</p><p>要解决这个问题，请写：</p><p><code>Provider.of&lt;$T&gt;(context, listen: false);</code></p><p>这是不被支持的，因为它可能会毫无意义地重建与事件处理程序相关的部件，而部件树并不关心该值。</p><p>使用的上下文就是<code>$context</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Tried to call Provider.of&lt;<span class="built_in">dynamic</span>&gt;. This <span class="keyword">is</span> likely a mistake and <span class="keyword">is</span> therefore</span><br><span class="line">unsupported.</span><br><span class="line"></span><br><span class="line">If you want to expose a variable that can be anything, consider changing</span><br><span class="line">`<span class="built_in">dynamic</span>` to `<span class="built_in">Object</span>` instead.</span><br></pre></td></tr></table></figure><p>尝试调用<code>Provider.of&lt;dynamic&gt;</code>，这可能是一个错误，因此不被支持。</p><p>如果你想暴露一个可以是任何东西的变量，可以考虑将<code>dynamic</code> 改为 <code>Object</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The error that will be thrown if [Provider.of] fails to find a [Provider]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">as an ancestor of the [BuildContext] used.</span></span></span><br></pre></td></tr></table></figure><p>如果<code>Provider.of</code>未能找到<code>Provider</code>的祖先，将抛出错误（<code>ProviderNotFoundException</code>）。</p></blockquote><p><span style="color:red;font-weight:bold;">总结归纳：</span></p><p>当我们试图从widget树外部监听提供者公开的值时，我们需要加上属性<code>listen:false</code>。</p><p>暴露一个可以是任何东西的变量时，可以考虑将<code>dynamic</code> 改为 <code>Object</code>。</p><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p><code>Consumer</code>只是在<code>Widget</code>中调用了<code>Provider.of</code>，并将其构造实现委托给了构造器。</p><blockquote><p>sc.</p><p>consumer.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Obtains [Provider<span class="language-xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span></span>] from its ancestors and passes its value to [builder].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The [Consumer] widget doesn&#x27;t do any fancy work. It just calls [Provider.of]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">in a new widget, and delegates its <span class="code">`build`</span> implementation to [builder].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[builder] must not be null and may be called multiple times (such as when</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">the provided value change).</span></span></span><br></pre></td></tr></table></figure><p>从其祖先获取<code>Provider&lt;T&gt;</code>，并将其值传递给<code>builder</code>。</p><p><code>Consumer</code>小部件不做任何花哨的工作。它只是在一个新的小部件中调用<code>Provider.of</code>，并将其构建实现委托给<code>Builder</code>。（<a name="target1">后续会用到这句</a>）</p><p><code>builder</code>不能为空，并且可以多次调用（例如：当提供的值更改时）。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The [Consumer] widget has two main purposes:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet">*</span> It allows obtaining a value from a provider when we don&#x27;t have a</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">  [BuildContext] that is a descendant of said provider, and therefore</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">  cannot use [Provider.of].</span></span></span><br></pre></td></tr></table></figure><p><code>Consumer</code>组件有两个主要目的：</p><ol><li><p>当我们没有<code>BuildContext</code>是该提供者的后代时，它允许从一个提供者（这里是指Consumer）那里获得一个值。因此，不能使用<code>Provider.of</code>。这种情况通常发生在创建提供者的部件是其消费者之一的时候。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">This scenario typically happens when the widget that creates the provider</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">is also one of its consumers, like in the following example:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">@override</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">Widget build(BuildContext context) &#123;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  return ChangeNotifierProvider(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    create: (_) =&gt; Foo(),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    child: Text(Provider.of&lt;Foo&gt;(context).value),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  );</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">&#125;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This example will throw a [ProviderNotFoundException], because [Provider.of]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">is called with a [BuildContext] that is an ancestor of the provider.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Instead, we can use the [Consumer] widget, that will call [Provider.of]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">with its own [BuildContext].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Using [Consumer], the previous example will become:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">@override</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">Widget build(BuildContext context) &#123;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  return ChangeNotifierProvider(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    create: (_) =&gt; Foo(),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    child: Consumer&lt;Foo&gt;(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">      builder: (_, foo, __) =&gt; Text(foo.value),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    &#125;,</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  );</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">&#125;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This won&#x27;t throw a [ProviderNotFoundException] and will correctly build the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Text]. It will also update the [Text] whenever the value <span class="code">`foo`</span> changes.</span></span></span><br></pre></td></tr></table></figure><p>这个例子展示了：<code>Provider.of</code>的调用需要<u><em>一个提供者的祖先的</em></u><code>BuildContext</code>，否则就会抛出一个<code>ProviderNotFoundException</code>【提供者未找到异常】。但是，用<code>Consumer</code>组件就能调用它自己<code>BuildContext</code>的<code>Provider.of</code>。这样就不会抛出<code>ProviderNotFoundException</code>【提供者未找到异常】，并且能够正确地生成文本，它也会在值变化时更新文本。（上述官方英文源码结合例子，重组直译）</p><p><span style="color:red;font-weight:bold;">个人理解：</span>从这个源码的注释文档可以得出：<code>Consumer</code>组件自带一个<code>BuildContext</code>，并且能够调用自己<code>BuildContext</code>的<code>Provider.of</code>。这一点，从源码中也得到了验证，<code>Consumer</code>不过是对<code>Provider.of</code>的封装优化。</p></li><li><p>它通过提供更精细化的重建来帮助性能优化。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Unless <span class="code">`listen: false`</span> is passed to [Provider.of], the widget</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">associated with the [BuildContext] passed to [Provider.of] will rebuild</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">whenever the obtained value changes. This is the expected behavior,</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">but sometimes it may rebuild more widgets than needed.</span></span></span><br></pre></td></tr></table></figure><p>除非将<code>listen:false</code>传递给<code>Provider.of</code>，否则传递给<code>Provider.of</code>的<code>BuildContext</code>相关的widget将在获得的值改变时重建。这是预期的行为，但有时可能会重建比需要更多的组件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Here&#x27;s an example:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> @override</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> Widget build(BuildContext context) &#123;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">   return FooWidget(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">     child: BarWidget(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">       bar: Provider.of&lt;Bar&gt;(context),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">     ),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">   );</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> &#125;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">In the above code, only <span class="code">`BarWidget`</span> depends on the value returned by</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Provider.of]. But when <span class="code">`Bar`</span> changes, then both <span class="code">`BarWidget`</span> <span class="emphasis">_and_</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">`FooWidget`</span> will rebuild.</span></span></span><br></pre></td></tr></table></figure><p><span style="color:red;font-weight:bold;">个人理解：</span>由<code>Consumer</code>组件的第1个目的可知，<code>Consumer</code>有自己的<code>BuildContext</code>。这个例子中没有<code>Consumer</code>，所以在这里通过<code>Provider.of</code>的调用获取<code>Bar</code>的值时，需要提供者组件的祖先，也就是需要<code>BarWidget</code>的祖先<code>FooWidget</code>中的<code>BuildContext</code>。而在向上查找祖先的<code>BuildContext</code>过程中，为了拿到最新值，依次层级间就都发生了重建。所以在这里，当<code>Bar</code>发生改变时，<code>BarWidget</code>和<code>FooWidget</code>就都发生了重建。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Ideally, only <span class="code">`BarWidget`</span> should be rebuilt. One</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">solution to achieve that is to use [Consumer].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">To do so, we will wrap <span class="emphasis">_only_</span> the widgets that depends on a provider into</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">a [Consumer]:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> @override</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> Widget build(BuildContext context) &#123;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">   return FooWidget(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">     child: Consumer&lt;Bar&gt;(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">       builder: (_, bar, __) =&gt; BarWidget(bar: bar),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">     ),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">   );</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> &#125;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">In this situation, if <span class="code">`Bar`</span> were to update, only <span class="code">`BarWidget`</span> would rebuild.</span></span></span><br></pre></td></tr></table></figure><p><span style="color:red;font-weight:bold;">个人理解：</span>由<code>Consumer</code>组件的第1个目的可知，<code>Consumer</code>有自己的<code>BuildContext</code>。这个例子中有<code>Consumer</code>，所以在获取<code>Bar</code>的值时，直接调用的是<code>Consumer</code>自己的<code>BuildContext</code>的<code>Provider.of</code>。所以当<code>Bar</code>改变时，只有<code>BarWidget</code>发生重建。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">But what if it was <span class="code">`FooWidget`</span> that depended on a provider? Example:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> @override</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> Widget build(BuildContext context) &#123;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">   return FooWidget(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">     foo: Provider.of&lt;Foo&gt;(context),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">     child: BarWidget(),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">   );</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> &#125;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Using [Consumer], we can handle this kind of scenario using the optional</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">`child`</span> argument:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> @override</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> Widget build(BuildContext context) &#123;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">   return Consumer&lt;Foo&gt;(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">     builder: (_, foo, child) =&gt; FooWidget(foo: foo, child: child),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">     child: BarWidget(),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">   );</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code"> &#125;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">In that example, <span class="code">`BarWidget`</span> is built outside of [builder]. Then, the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">`BarWidget`</span> instance is passed to [builder] as the last parameter.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This means that when [builder] is called again with new values, a new</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">instance of <span class="code">`BarWidget`</span> will not be created.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This lets Flutter know that it doesn&#x27;t have to rebuild <span class="code">`BarWidget`</span>.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Therefore in such a configuration, only <span class="code">`FooWidget`</span> will rebuild</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">if <span class="code">`Foo`</span> changes.</span></span></span><br></pre></td></tr></table></figure><p><span style="color:red;font-weight:bold;">个人理解：</span>由<a href="#target1">前面的源码注释</a>可知，<code>Consumer</code>调用<code>Provider.of</code>的实现委托给了<code>builder</code>。在这个例子中，将子组件实例作为<code>builder</code>的最后一个参数，从而使该子组件被创建在<code>builder</code>之外，这样一来，由于新值改变导致<code>builder</code>被调用时，不会创建该子组件的新实例。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown"><span class="section">## Note:</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The [Consumer] widget can also be used inside [MultiProvider]. To do so, it</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">must return the <span class="code">`child`</span> passed to [builder] in the widget tree it creates.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">MultiProvider(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  providers: [</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    Provider(create: (_) =&gt; Foo()),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    Consumer&lt;Foo&gt;(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">      builder: (context, foo, child) =&gt;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">        Provider.value(value: foo.bar, child: child),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    )</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  ],</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">);</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">See also:</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet">  *</span> [Selector], a [Consumer] that can filter updates.</span></span></span><br></pre></td></tr></table></figure><p><code>Consumer</code>组件也可以在<code>MultiProvider</code>内使用。为此，它必须在它创建的部件树中返回传递给<code>builder</code>的<code>child</code>。</p><p>也请参见：</p><p>​    <code>Selector</code>，一个可以过滤更新的<code>Consumer</code>。</p></li></ol></blockquote><p><span style="color:red;font-weight:bold;">总结归纳：</span></p><p><code>Consumer</code>组件只是对<code>Provider.of</code>的封装；</p><p><code>Consumer</code>给后代提供了它自己的<code>BuildContext</code>，因此可以调用<code>Provider.of</code>。</p><p><code>Consumer</code>调用<code>Provider.of</code>的实现委托给了<code>builder</code>，因此可以将子组件实例作为<code>builder</code>的最后一个参数，这样，当新值改变导致<code>builder</code>被调用时，不会创建该子组件的新实例。</p><h4 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h4><p><code>Selector</code>类和<code>Consumer</code>类似，只是对<code>build</code>调用<code>Widget</code>方法时提供更精细的控制，简单点来说，<code>Selector</code>也是一个消费者，它允许你可以从模型中准备定义哪些属性。</p><blockquote><p>sc.</p><p>selector.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">An equivalent to [Consumer] that can filter updates by selecting a limited</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">amount of values and prevent rebuild if they don&#x27;t change.</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Selector] will obtain a value using [Provider.of], then pass that value</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">to <span class="code">`selector`</span>. That <span class="code">`selector`</span> callback is then tasked to return an object</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">that contains only the information needed for <span class="code">`builder`</span> to complete.</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">By default, [Selector] determines if <span class="code">`builder`</span> needs to be called again</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">by comparing the previous and new result of <span class="code">`selector`</span> using</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[DeepCollectionEquality] from the package <span class="code">`collection`</span>.</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This behavior can be overridden by passing a custom <span class="code">`shouldRebuild`</span> callback.</span></span></span><br></pre></td></tr></table></figure><p>相当于<code>Consumer</code>，它可以通过选择有限数量的值来过滤更新，如果这些值没有变化，则防止重建。</p><p><code>Selector</code>将使用<code>Provider.of</code>获得一个值，然后将该值传给选择器。该选择器的回调任务是返回一个只包含<code>builder</code>完成所需信息的对象。</p><p>默认情况下，<code>Selector</code>通过比较之前的内容来确定是否需要再次调用<code>builder</code>。</p><p>这些行为可以通过传递一个自定义的<code>shouldRebuild</code>回调来重写。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown"> <span class="strong">**NOTE**</span>:</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The selected value must be immutable, or otherwise [Selector] may think</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">nothing changed and not call <span class="code">`builder`</span> again.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">As such, it <span class="code">`selector`</span> should return either a collection ([List]/[Map]/[Set]/[Iterable])</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">or a class that override <span class="code">`==`</span>.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">To select multiple values without having to write a class that implements <span class="code">`==`</span>,</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">the easiest solution is to use a &quot;Tuple&quot; from [<span class="string">tuple</span>](<span class="link">https://pub.dev/packages/tuple</span>):</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">Selector&lt;Foo, Tuple2&lt;Bar, Baz&gt;&gt;(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  selector: (_, foo) =&gt; Tuple2(foo.bar, foo.baz),</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  builder: (_, data, __) &#123;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    return Text(&#x27;$&#123;data.item1&#125;  $&#123;data.item2&#125;&#x27;);</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  &#125;</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">)</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">In that example, <span class="code">`builder`</span> will be called again only if <span class="code">`foo.bar`</span> or</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">`foo.baz`</span> changes.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">For generic usage information, see [Consumer].</span></span></span><br></pre></td></tr></table></figure><p>所选的值必须是不可改变的，否则<code>Selector</code>可能认为什么都没有改变而不再调用<code>builder</code>。</p><p>因此，<code>selector</code>应该返回一个集合（List&#x2F;Map&#x2F;Set&#x2F;Iterable）或者一个覆盖&#x3D;&#x3D;的类。</p><p>要选择多个值而不需要写一个实现&#x3D;&#x3D;的类，最简单的解决方案是使用一个<code>Tuple</code>（<a href="https://pub.dev/packages/tuple%EF%BC%89%E3%80%82">https://pub.dev/packages/tuple）。</a></p><p>对于<code>Selector0</code>：</p><p>由<code>Selector</code>的构造函数可知，<code>Selector</code>是继承自<code>Selector0</code>的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">A base class for custom [Selector].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">It works with any [InheritedWidget]. Variants like [Selector] and</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Selector6] are just syntax sugar to use [Selector0] with [Provider.of].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">But it will <span class="strong">**not**</span> work with values</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">coming from anything but [InheritedWidget].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">As such, the following:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```dart</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">T value;</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">return Selector0(</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  selector: (_) =&gt; value,</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  builder: ...,</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">)</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">```</span></span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">will still call <span class="code">`builder`</span> again, even if <span class="code">`value`</span> didn&#x27;t change.</span></span></span><br></pre></td></tr></table></figure><p><code>Selector0</code>是自定义<code>Selector</code>的一个基类。</p><p>它适用于任何<code>InheritedWidget</code>。像<code>Selector</code>和<code>Selector6</code>这样的变体只是使用<code>Selector0</code>和<code>Provider.of</code>的语法糖。</p><p>但对于来自<code>Inheritedwidget</code>以外的任何数值，它都不会起作用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Both <span class="code">`builder`</span> and <span class="code">`selector`</span> must not be <span class="code">`null`</span>.</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">A function that builds a widget tree from <span class="code">`child`</span> and the last result of</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[selector].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[builder] will be called again whenever the its parent widget asks for an</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">update, or if [selector] return a value that is different from the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">previous one using [operator==].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Must not be <span class="code">`null`</span>.</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">A function that obtains some [InheritedWidget] and map their content into</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">a new object with only a limited number of properties.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The returned object must implement [operator==].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Must not be <span class="code">`null`</span></span></span></span><br></pre></td></tr></table></figure><p><code>builder</code>和<code>selector</code>都必须不为空。</p><p><code>builder</code>：一个函数，它从<code>child</code>和<code>selector</code>的最后一个结果，构造一个组件树。当它的父组件要求更新时，或者如果<code>selector</code>使用<code>operator==</code>返回一个与前一个不同的值。必须不为空。</p><p><code>selector</code>：一个获取<code>InheritedWidget</code>的函数，并将其内容映射到一个只有有限属性的新对象。返回的对象必须实现<code>operator==</code>。必须不为空。</p></blockquote><p><span style="color:red;font-weight:bold;">总结归纳：</span></p><p><code>Selector</code>与<code>Consumer</code>类似。</p><p><code>Selector</code>是<code>Selector0</code>和<code>Provider</code>的一个语法糖。</p><p><code>Selector0</code>只对<code>Inheritedwidget</code>内的数据起作用。</p><p><code>Selector</code>的两大参数都必须不为空。</p><h4 id="InheritedContext"><a href="#InheritedContext" class="headerlink" title="InheritedContext"></a>InheritedContext</h4><p><code>InheritedContext</code>是<code>Provider</code>内置扩展了<code>BuildContext</code>。</p><blockquote><p>sc.</p><p>inherited_context.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">A [BuildContext] associated to an [InheritedProvider].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">It an extra [markNeedsNotifyDependents] method and the exposed value.</span></span></span><br></pre></td></tr></table></figure><p>一个与<code>InheritedProvider</code>相关的<code>BuildContext</code>，它有一个额外的<code>markNeedsNotifyDependents</code>方法和暴露的值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The current value exposed by [InheritedProvider].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This property is lazy loaded, and reading it the first time may trigger</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">some side-effects such as creating a [T] instance or start a subscription.</span></span></span><br></pre></td></tr></table></figure><p>由<code>InheritedProvider</code>暴露当前值。</p><p>这个属性是懒加载的，第一次读取它可能会触发一些副作用，如创建一个<code>T</code>实例或启动一个订阅。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Marks the [InheritedProvider] as needing to update dependents.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This bypass [InheritedWidget.updateShouldNotify] and will force widgets</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">that depends on [T] to rebuild.</span></span></span><br></pre></td></tr></table></figure><p>将<code>InheritedProvider</code>标记为按需更新依赖项。</p><p>这绕过了<code>InheritedWidget.updateShouldNotify</code>，将迫使依赖于<code>T</code>的widget重新构建。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Whether <span class="code">`setState`</span> was called at least once or not.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">It can be used by [DeferredStartListening] to differentiate between the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">very first listening, and a rebuild after <span class="code">`controller`</span> changed.</span></span></span><br></pre></td></tr></table></figure><p>对于<code>InheritedProvider</code>：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">A generic implementation of an [InheritedWidget].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Any descendant of this widget can obtain <span class="code">`value`</span> using [Provider.of].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Do not use this class directly unless you are creating a custom &quot;Provider&quot;.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Instead use [Provider] class, which wraps [InheritedProvider].</span></span></span><br></pre></td></tr></table></figure><p><code>InheritedWidget</code>的通用实现。</p><p>此组件的任何后代都可以使用<code>Provider.of</code>获取值。</p><p>不要直接使用这个类，除非你正在创建一个自定义的提供者。而要使用<code>Provider</code>类，它包装了<code>InheritedProvider</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">See also:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet"> -</span> [DeferredInheritedProvider], a variant of this object where the provided</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   object and the created object are two different entity.</span></span></span><br></pre></td></tr></table></figure><p>另请参阅：</p><p><code>DeferredInheritedProvider</code>，这个对象（即InheritedWidget）的变体，其中提供的对象和创建的对象是两个不同的实体。</p><p>sc.</p><p>deferred_inherited_provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">An [InheritedProvider] where the object listened is <span class="emphasis">_not_</span> the object</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">emitted.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">For example, for a stream provider, we&#x27;ll want to listen to <span class="code">`Stream&lt;T&gt;`</span>,</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">but expose <span class="code">`T`</span> not the [Stream].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">See also:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet"> -</span> [InheritedProvider], a variant of this object where the provider object and</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   the created object are the same.</span></span></span><br></pre></td></tr></table></figure><p>一个<code>InheritedProvider</code>，其中被监听的对象不是被触发的对象。</p><p>例如，对一个<code>Stream</code>提供者来说，我们想监听<code>Stream&lt;T&gt;</code>，但暴露的<code>T</code>不是<code>Stream</code>。</p><p>另请参阅：</p><p><code>InheritedProvider</code>，此对象的变体，提供者对象和创建的对象是相同的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Lazily create an object automatically disposed when</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[DeferredInheritedProvider] is removed from the tree.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The object create will be listened using <span class="code">`startListening`</span>, and its content</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">will be exposed to <span class="code">`child`</span> and its descendants.</span></span></span><br></pre></td></tr></table></figure><p>当<code>DeferredInheritedProvider</code>从树中移除时，延迟创建一个自动释放的对象。</p><p>创建的对象将使用<code>startListening</code>进行监听，并且它的内容将暴露给子孙后代。</p></blockquote><p><span style="color:red;font-weight:bold;">总结归纳：</span></p><p><code>InheritedContext</code>，它是与<code>InheritedProvider</code>相关的<code>BuildContext</code>。</p><p><code>InheritedContext</code>由<code>InheritedProvider</code>暴露相关值。</p><p><code>InheritedProvider</code>，这个组件的任何后代都可以使用<code>Provider.of</code>获取值。</p><p>官方建议使用<code>Provider</code>，它包装了<code>InheritedProvider</code>。</p><h4 id="扩展：BuildContext"><a href="#扩展：BuildContext" class="headerlink" title="扩展：BuildContext"></a>扩展：BuildContext</h4><blockquote><p>最后再来看看<a name='target2'>BuildContext</a>：</p><p>sc.</p><p>framework.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">A handle to the location of a widget in the widget tree.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This class presents a set of methods that can be used from</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[StatelessWidget.build] methods and from methods on [State] objects.</span></span></span><br></pre></td></tr></table></figure><p>在组件树中小部件的位置的方法。【rf. handle n. （解决问题的）方法、途径】</p><p>这个类提供了一组方法，可在<code>StatelessWidget.build</code>方法和<code>State</code>对象的方法中使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">[BuildContext] objects are passed to [WidgetBuilder] functions (such as</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[StatelessWidget.build]), and are available from the [State.context] member.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Some static functions (e.g. [showDialog], [Theme.of], and so forth) also</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">take build contexts so that they can act on behalf of the calling widget, or</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">obtain data specifically for the given context.</span></span></span><br></pre></td></tr></table></figure><p><code>BuildContext</code>对象被传递给<code>WidgetBuilder</code>函数（比如<code>StatelessWidget.build</code>），并且可以从<code>State.context</code>成员中获得。一些静态函数（比如<code>showDialog</code>、<code>Theme.of</code>等）也接受构建上下文，以便它们可以代表调用的小部件采取行动，或者为给定的上下文获得专门的数据。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Each widget has its own [BuildContext], which becomes the parent of the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">widget returned by the [StatelessWidget.build] or [State.build] function.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">(And similarly, the parent of any children for [RenderObjectWidget]s.)</span></span></span><br></pre></td></tr></table></figure><p>每个小组件都有自己的<code>BuildContext</code>，它成为<code>StatelessWidget.build</code>或<code>State.build</code>函数所返回组件的父组件。（同样，对于<code>RenderObjectWidget</code>，它是任何子组件的父组件。）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">In particular, this means that within a build method, the build context of</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">the widget of the build method is not the same as the build context of the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">widgets returned by that build method. This can lead to some tricky cases.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">For example, [Theme.of(context)] looks for the nearest enclosing [Theme] of</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">the given build context. If a build method for a widget Q includes a [Theme]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">within its returned widget tree, and attempts to use [Theme.of] passing its</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">own context, the build method for Q will not find that [Theme] object. It</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">will instead find whatever [Theme] was an ancestor to the widget Q. If the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">build context for a subpart of the returned tree is needed, a [Builder]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">widget can be used: the build context passed to the [Builder.builder]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">callback will be that of the [Builder] itself.</span></span></span><br></pre></td></tr></table></figure><p>特别是，这意味着在一个构建方法中，该构建方法的组件构建的上下文与该构建方法返回的小组件构建的上下文不一样。这可能会导致一些棘手的情况。例如，<code>Theme.of(context)</code>查找给定上下文中最近封闭的<code>Theme</code>。</p><p>如果一个小部件Q的构建方法在其返回的小部件树中包括一个<code>Theme</code>，并尝试使用<code>Theme.of</code>传递其自己的上下文。Q的构建方法将不会找到那个<code>Theme</code>对象。相反，它会找到每一个小组件Q的祖先的<code>Theme</code>。【rf. whatever pron. 任何;  每一;】如果需要为返回的树的子部分构建上下文，<code>Builder</code>组件可能被用到：传递给<code>Builder.builder</code>回调的构建上下文将是<code>Builder</code>本身的构建上下文。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The [BuildContext] for a particular widget can change location over time as</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">the widget is moved around the tree. Because of this, values returned from</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">the methods on this class should not be cached beyond the execution of a</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">single synchronous function.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[BuildContext] objects are actually [Element] objects. The [BuildContext]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">interface is used to discourage direct manipulation of [Element] objects.</span></span></span><br></pre></td></tr></table></figure><p>一个特定组件的<code>BuildContext</code>可以随时间的推移，随着组件在树上的移动而改变位置。正因为如此，从这个类上的方法返回的值不应该在执行单个同步函数之后被缓存。</p><p><code>BuildContext</code>对象实际上是<code>Element</code>对象。<code>BuildContext</code>接口被用来阻止对<code>Element</code>对象的直接操作。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The current configuration of the [Element] that is this [BuildContext].</span></span></span><br></pre></td></tr></table></figure><p><code>Element</code>的当前配置就是<code>BuildContext</code>。</p><p>sc. framework.dart 中涉及到<code>BuildContext</code>的直译与总结：</p><p>在<code>GlobalKey</code>部分中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Global keys uniquely identify elements. Global keys provide access to other</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">objects that are associated with those elements, such as [BuildContext].</span></span></span><br></pre></td></tr></table></figure><p>全局键可以唯一地识别元素。全局键提供了对与这些元素关联的其他对象的访问，例如<code>BuildContext</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The build context in which the widget with this key builds.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The current context is null if there is no widget in the tree that matches</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">this global key.</span></span></span><br></pre></td></tr></table></figure><p>具有此键的组件在其中生成的构建上下文。</p><p>如果树上没有匹配这个全局键的组件，则当前上下文为空。</p><p>在<code>StatelessWidget</code>部分中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The framework calls this method when this widget is inserted into the tree</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">in a given [BuildContext] and when the dependencies of this widget change</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">(e.g., an [InheritedWidget] referenced by this widget changes). This</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">method can potentially be called in every frame and should not have any side</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">effects beyond building a widget.</span></span></span><br></pre></td></tr></table></figure><p>当这个小组件在给定的<code>BuildContext</code>中被插入到树中，以及这个组件的依赖关系发生变化（例如，这个组件引用的<code>InheritedWidget</code>发生变化）时，框架将调用此方法。此方法有可能在每一帧中被调用，除了构建一个组件之外，不会有任何副作用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Typically implementations return a newly created constellation of widgets</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">that are configured with information from this widget&#x27;s constructor and</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">from the given [BuildContext].</span></span></span><br></pre></td></tr></table></figure><p>通常情况下，实现会返回一个新创建的一系列组件，这些小组件是用来自这个组件的构造函数和给定的<code>BuildContext</code>的信息配置的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The given [BuildContext] contains information about the location in the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">tree at which this widget is being built. For example, the context</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">provides the set of inherited widgets for this location in the tree. A</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">given widget might be built with multiple different [BuildContext]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">arguments over time if the widget is moved around the tree or if the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">widget is inserted into the tree in multiple places at once.</span></span></span><br></pre></td></tr></table></figure><p>给定的<code>BuildContext</code>包含了该组件在树中被构建的位置信息。例如，该上下文提供了树中该位置的继承组件的集合。如果该部件在树中被移动，或者该部件被同时插入到树中的多个位置，那么该部件可能会随着时间的推移被构建多个不同的<code>BuildContext</code>参数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The implementation of this method must only depend on:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet">*</span> the fields of the widget, which themselves must not change over time,</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">  and</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet">*</span> any ambient state obtained from the <span class="code">`context`</span> using</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">  [BuildContext.dependOnInheritedWidgetOfExactType].</span></span></span><br></pre></td></tr></table></figure><p>此方法（build）的实现必须仅依赖于：</p><p>小部件的字段，它们本身不能随着时间的推移而改变，并且可以从上下文中使用<code>BuildContext.dependOnInheritedWidgetOfExactType</code>获得任何环境状态。</p><p>在<code>StatefulWidget</code>部分中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Stateful widgets are useful when the part of the user interface you are</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">describing can change dynamically, e.g. due to having an internal</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">clock-driven state, or depending on some system state. For compositions that</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">depend only on the configuration information in the object itself and the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[BuildContext] in which the widget is inflated, consider using</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[StatelessWidget].</span></span></span><br></pre></td></tr></table></figure><p>当你所描述的用户界面的部分可以动态变化时，例如，由于有一个内部时钟驱动的状态，或者取决于一些系统状态，有状态的组件是还有用的。对于只依赖对象本身和<code>BuildContext</code>的配置信息的组件，可以考虑使用<code>StatelessWidget</code>。</p><p>对于<code>State</code>部分中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet"> *</span> The newly created [State] object is associated with a [BuildContext].</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   This association is permanent: the [State] object will never change its</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   [BuildContext]. However, the [BuildContext] itself can be moved around</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   the tree along with its subtree. At this point, the [State] object is</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   considered [mounted].</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet"> *</span> The framework calls [initState]. Subclasses of [State] should override</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   [initState] to perform one-time initialization that depends on the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   [BuildContext] or the widget, which are available as the [context] and</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   [widget] properties, respectively, when the [initState] method is</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   called.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet"> *</span> The framework calls [didChangeDependencies]. Subclasses of [State] should</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   override [didChangeDependencies] to perform initialization involving</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   [InheritedWidget]s. If [BuildContext.dependOnInheritedWidgetOfExactType] is</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   called, the [didChangeDependencies] method will be called again if the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">   inherited widgets subsequently change or if the widget moves in the tree.</span></span></span><br></pre></td></tr></table></figure><p>新创建的<code>State</code>对象与<code>BuildContext</code>相关联。这种关联是永久性的：<code>State</code>对象永远不会改变它的<code>BuildContext</code>。然而，<code>BuildContext</code>本身可以和它的子树一起在树上移动。在这一点上，<code>State</code>对象被认为是被挂载。<br>框架调用<code>initState</code>。<code>State</code>的子类应该覆盖<code>initState</code>来执行一次性的初始化，这取决于<code>BuildContext</code>或上下文，当<code>initState</code>方法被调用时，它们分别作为上下文和组件属性可使用。<br>框架调用<code>didChangeDependency</code>，<code>State</code>的子类应该重写<code>didChangeDependency</code>以执行涉及<code>InheritedWidget</code>的初始化。如果<code>BuildContext.dependOnInheritedWidgetOfExactType</code>被调用，那么如果继承的组件随后发生变化或者widget在树上移动，<code>didChangeDependencies</code>方法将被再次调用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The framework associates [State] objects with a [BuildContext] after</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">creating them with [StatefulWidget.createState] and before calling</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[initState]. The association is permanent: the [State] object will never</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">change its [BuildContext]. However, the [BuildContext] itself can be moved</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">around the tree.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">After calling [dispose], the framework severs the [State] object&#x27;s</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">connection with the [BuildContext].</span></span></span><br></pre></td></tr></table></figure><p>在用<code>StatefulWidget.createState</code>创建<code>State</code>对象后 和 在调用<code>initState</code>前，框架将<code>State</code>对象与<code>BuildContext</code>关联起来。这种关联是永久性的：<code>State</code>对象将永远不会改变其<code>BuildContext</code>。但是，<code>BuildContext</code>本身可以在树中移动。</p><p>在调用<code>dispose</code>后，框架切断了<code>State</code>对象与<code>BuildContext</code>的联系。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Whether this [State] object is currently in a tree.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">After creating a [State] object and before calling [initState], the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">framework &quot;mounts&quot; the [State] object by associating it with a</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[BuildContext]. The [State] object remains mounted until the framework</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">calls [dispose], after which time the framework will never ask the [State]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">object to [build] again.</span></span></span><br></pre></td></tr></table></figure><p>在创建一个<code>State</code>对象之后 和 在调用<code>initState</code>之前，框架通过<code>State</code>对象与一个<code>BuildContext</code>相关联来进行挂载。<code>State</code>对象将保持挂载状态，直到框架调用<code>dispose</code>为止。在此之后，框架将永远不会要求该<code>State</code>对象进行重构。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">You cannot use [BuildContext.dependOnInheritedWidgetOfExactType] from this</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">method. However, [didChangeDependencies] will be called immediately</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">following this method, and [BuildContext.dependOnInheritedWidgetOfExactType] can</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">be used there.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Implementations of this method should start with a call to the inherited</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">method, as in <span class="code">`super.initState()`</span>.</span></span></span><br></pre></td></tr></table></figure><p>你不能从这个方法（<code>initState</code>）中使用<code>BuildContext.dependOInheritedWidgetOfExactType</code>。然而，<code>didChangeDependencies</code>将在这个方法之后立即被调用，并且<code>BuildContext.dependOInheritedWidgetOfExactType</code>可以在那儿被使用。这个方法的实现应该从调用继承方法开始，如<code>super.initState()</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Typically implementations return a newly created constellation of widgets</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">that are configured with information from this widget&#x27;s constructor, the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">given [BuildContext], and the internal state of this [State] object.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The given [BuildContext] contains information about the location in the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">tree at which this widget is being built. For example, the context</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">provides the set of inherited widgets for this location in the tree. The</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[BuildContext] argument is always the same as the [context] property of</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">this [State] object and will remain the same for the lifetime of this</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">object. The [BuildContext] argument is provided redundantly here so that</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">this method matches the signature for a [WidgetBuilder].</span></span></span><br></pre></td></tr></table></figure><p>通常，实现返回一个新创建的一系列小组件，这些小组件的配置来自该组件的构造函数、给定的<code>BuildContext</code>以及这个<code>State</code>对象的内部状态。</p><p>给定的<code>BuildContext</code>包含关于该组件正在被构建的树中的位置信息。<code>BuildContext</code>参数总是与这个<code>State</code>对象的<code>context</code>属性相同，并且在这个对象的生命周期内保持不变。这里提供的<code>BuildContext</code>参数是多余的，以便此方法与<code>WidgetBuilder</code>的签名相匹配。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Putting a <span class="code">`Widget build(BuildContext context)`</span> method on [State] rather</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">than putting a <span class="code">`Widget build(BuildContext context, State state)`</span> method</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">on [StatefulWidget] gives developers more flexibility when subclassing</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[StatefulWidget].</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">For example, [AnimatedWidget] is a subclass of [StatefulWidget] that</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">introduces an abstract <span class="code">`Widget build(BuildContext context)`</span> method for its</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">subclasses to implement. If [StatefulWidget] already had a [build] method</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">that took a [State] argument, [AnimatedWidget] would be forced to provide</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">its [State] object to subclasses even though its [State] object is an</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">internal implementation detail of [AnimatedWidget].</span></span></span><br></pre></td></tr></table></figure><p>将一个<code>Widget build(BuildContext context)</code>方法放在<code>State</code>上，而不是将<code>Widget build(BuildContext context, State state)</code>方法放在<code>StatefulWidget</code>上，这为开发人员在子类化<code>StatefulWidget</code>提供了更多的灵活性。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">This method is also called immediately after [initState]. It is safe to</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">call [BuildContext.dependOnInheritedWidgetOfExactType] from this method.</span></span></span><br></pre></td></tr></table></figure><p>这个方法（<code>didChangeDependencies</code>）也会在<code>initState</code>之后立即调用。从这个方法中调用<code>BuildContext.dependOnInheritedWidgetOfExactType</code>是安全的。</p><p>在<code>InheritedWidget</code>中的部分：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">To obtain the nearest instance of a particular type of inherited widget from</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">a build context, use [BuildContext.dependOnInheritedWidgetOfExactType].</span></span></span><br></pre></td></tr></table></figure><p>要从构建上下文中获得一个特定类型的继承组件的最近实例，请使用<code>BuildContext.dependOnInheritedWidgetOfExactType</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">The convention is to provide a static method <span class="code">`of`</span> on the [InheritedWidget]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">which does the call to [BuildContext.dependOnInheritedWidgetOfExactType]. This</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">allows the class to define its own fallback logic in case there isn&#x27;t</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">a widget in scope.</span></span></span><br></pre></td></tr></table></figure><p>惯例是在<code>InheritedWidget</code>上提供一个静态方法of，它将对<code>BuildContext.dependOnInheritedWidgetOfExactType</code>进行调用。这允许类在范围内没有组件的情况下定义自己的回退逻辑。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Occasionally, the inherited widget is an implementation detail of another</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">class, and is therefore private. The <span class="code">`of`</span> method in that case is typically</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">put on the public class instead. For example, [Theme] is implemented as a</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[StatelessWidget] that builds a private inherited widget; [Theme.of] looks</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">for that inherited widget using [BuildContext.dependOnInheritedWidgetOfExactType]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">and then returns the [ThemeData].</span></span></span><br></pre></td></tr></table></figure><p>有时，继承的组件是另一个类的实现细节，因此是私有的。这种情况下的<code>of</code>方法通常放在公共类上。例如，<code>Theme</code>被实现为一个<code>StateleeWidget</code>，它构建一个私有的继承小组件；使用<code>BuildContext.dependOnInheritedWidgetOfExactType</code>查找继承的小组件，然后返回<code>ThemeData</code>。</p><p>在<code>ElementVisitor</code>部分中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Signature for the callback to [BuildContext.visitChildElements].</span></span></span><br></pre></td></tr></table></figure><p>对<code>BuildContext.visitChildElements</code>的回调进行签名。</p><p>最后：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;This error happens if you call dependOnInheritedWidgetOfExactType() on the &#x27;</span></span><br><span class="line"><span class="string">&#x27;BuildContext for a widget that no longer appears in the widget tree &#x27;</span></span><br><span class="line"><span class="string">&#x27;(e.g., whose parent widget no longer includes the widget in its &#x27;</span></span><br><span class="line"><span class="string">&#x27;build). This error can occur when code calls &#x27;</span></span><br><span class="line"><span class="string">&#x27;dependOnInheritedWidgetOfExactType() from a timer or an animation callback.&#x27;</span>,</span><br></pre></td></tr></table></figure><p>如果你在<code>BuildContext</code>上为一个不再出现在组件树上的组件调用<code>dependOnInheritedWidgetOfExactType()</code>（例如它的父组件不再将该组件纳入它的<code>build</code>中），这个错误就会发生。当代码从一个计时器或动画回调中调用<code>dependOnInheritedWidgetOfExactType()</code>时，就会发生这个错误。</p></blockquote><p><span style="color:red;font-weight:bold;">总结归纳：</span></p><p><code>BuildContext</code>对象实际上是<code>Element</code>对象。</p><p><code>BuildContext</code>接口被用来阻止对<code>Element</code>对象的直接操作。</p><p>给定的<code>BuildContext</code>包含了该组件在树中被构建的位置信息。如果该部件在树中被移动，或者该部件被同时插入到树中的多个位置，那么该部件可能会随着时间的推移被构建多个不同的<code>BuildContext</code>参数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;出于好奇，翻看了一下源码以及源码注释文档，文中仅摘取了注释文档部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rf.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liujunmin.com/flutter/provider/consumer.html&quot;&gt;Flutter Provider状态管理—四种消费者使用分析&lt;/a&gt; （文中的例子很详细）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;pub.dev&quot;&gt;pub.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文末，额外对源码注释中涉及到的&lt;a href=&quot;#target2&quot;&gt;BuildContext&lt;/a&gt;部分进行了直译与总结。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://yexingshusheng.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="flutter" scheme="https://yexingshusheng.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter状态管理之八大提供者使用分析</title>
    <link href="https://yexingshusheng.com/2022/05/flutter-zhuang-tai-guan-li-zhi-ba-da-ti-gong-zhe-shi-yong-fen-xi.html"/>
    <id>https://yexingshusheng.com/2022/05/flutter-zhuang-tai-guan-li-zhi-ba-da-ti-gong-zhe-shi-yong-fen-xi.html</id>
    <published>2022-05-11T10:27:10.000Z</published>
    <updated>2022-05-16T01:03:53.832Z</updated>
    
    <content type="html"><![CDATA[<p>出于好奇，翻看了一下源码以及源码注释文档，文中仅摘取了注释文档部分。</p><blockquote><p>rf.</p><p><a href="https://www.liujunmin.com/flutter/provider/provider.html#streamprovider">Flutter Provider状态管理—八种提供者使用分析</a> （文中的例子很详细）</p><p><a href="https://segmentfault.com/a/1190000040772369#:~:text=Consumer1%2D6%3A,%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%E3%80%82">状态管理基本介绍和使用</a> （对提供者和消费者的简单介绍）</p><p><a href="https://pub.dev/">pub.dev</a></p></blockquote><span id="more"></span><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><p>使用它可以为组件树中的任何位置提供值，但是当该值更改的时候，它并不会更新UI。</p><blockquote><p>sc.</p><p>provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Creates a value, store it, and expose it to its descendants.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The value can be optionally disposed using [dispose] callback.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">This callback which will be called when [Provider] is unmounted from the</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">widget tree.</span></span></span><br></pre></td></tr></table></figure><p>创建一个值，储存它，并把它暴露给它的后代。</p><p>这个回调会在<code>Provider</code>从组件树中卸载时，被调用。</p></blockquote><h4 id="ChangeNotifierProvider"><a href="#ChangeNotifierProvider" class="headerlink" title="ChangeNotifierProvider"></a>ChangeNotifierProvider</h4><p>它会监听模型对象的变化，而且当数据改变时，会重建<code>Consumer</code>。</p><p><span style="color:red;font-weight:bold;">创建模型时<em><strong>混入</strong></em>（with）ChangeNotifier的作用：</span></p><p>因为模型类使用了<code>ChangeNotifier</code>类，那么我们就可以访问<code>notifyListeners()</code>并且在调用它的任何时候，<code>ChangeNotifierProvider</code>都会收到通知并且消费者将重建UI。</p><blockquote><p>sc.</p><p>change_notifier_provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Listens to a [ChangeNotifier], expose it to its descendants and rebuilds</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">dependents whenever [ChangeNotifier.notifyListeners] is called.</span></span></span><br></pre></td></tr></table></figure><p>倾听一个<code>ChangeNotifier</code>，将其暴露给它的子代，并且每当<code>ChangeNotifier.notifyListeners</code>被调用时，重建依赖。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">A [ChangeNotifierProvider] that builds and synchronizes a [ChangeNotifier]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">with external values.</span></span></span><br></pre></td></tr></table></figure><p>一个<code>ChangeNotifierProvider</code>，用于建立和同步一个<code>ChangeNotifier</code>的外部值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet">  *</span> [ChangeNotifier], which is listened by [ChangeNotifierProvider].</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet">  *</span> [ChangeNotifierProxyProvider], to create and provide a [ChangeNotifier]</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    of variables from other providers.</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">  * [ListenableProvider], similar to [ChangeNotifierProvider] but works with</span></span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    any [Listenable].</span></span></span></span><br></pre></td></tr></table></figure><p><code>ChangeNotifier</code>，它被<code>ChangeNotifierProvider</code>监听。</p><p><a href="#target1">ChangeNotifierProxyProvider</a>，创建并提供来自其他提供者的<code>ChangeNotifier</code>变量。</p><p><code>ListenableProvider</code>，类似于<code>ChangeNotifierProvider</code>，但与任何<code>Listenable</code>一起工作。</p></blockquote><h4 id="StreamProvider"><a href="#StreamProvider" class="headerlink" title="StreamProvider"></a>StreamProvider</h4><p>提供流值，围绕<code>StreamBuilder</code>，所提供的值会在传入的时候替换掉新值。</p><p>和<code>FutureProvider</code>一样，主要的区别在于值会根据多次触发重新构建UI。</p><blockquote><p>rf.</p><p><a href="https://book.flutterchina.club/chapter7/futurebuilder_and_streambuilder.html#_7-6-2-streambuilder">StreamBuilder文档地址</a></p><p>Dart中的Stream用来接收异步数据，和Future不同的是，它可以接受多个异步操作的结果，常用于会多次读取数据的异步场景。</p><p>而StreamBuilder正是配合Stream来展示流上数据变化的UI组件。</p><p>一般来说，Stream应该在它生成事件前等待订阅者，否则事件的生成毫无意义。</p></blockquote><blockquote><p>sc.</p><p>async_provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Listens to a [Stream] and exposes its content to <span class="code">`child`</span> and descendants.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Its main use-case is to provide to a large number of a widget the content</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">of a [Stream], without caring about reacting to events.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">A typical example would be to expose the battery level, or a Firebase query.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Trying to use [Stream] to replace [ChangeNotifier] is outside of the scope</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">of this class.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">It is considered an error to pass a stream that can emit errors without</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">providing a <span class="code">`catchError`</span> method.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">`initialData`</span> determines the value exposed until the [Stream] emits a value.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">By default, [StreamProvider] considers that the [Stream] listened uses</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">immutable data. As such, it will not rebuild dependents if the previous and</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">the new value are <span class="code">`==`</span>.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">To change this behavior, pass a custom <span class="code">`updateShouldNotify`</span>.</span></span></span><br></pre></td></tr></table></figure><p>监听一个<code>Stream</code>，并且暴露它的结果给子组件。</p><p>它的主要用途是向大量的小部件提供<code>Stream</code>的内容，而不关心对事件的反应。</p><p>一个典型的例子是暴露电池电量或Firebase查询。</p><p>试图用<code>Stream</code>来代替<code>ChangeNotifier</code>是在这个类的范围之外。</p><p>在没有提供catchError方法的情况下，传递一个可以发出错误的<code>Stream</code>，被认为是一个错误。</p><p><code>initialData</code>决定了在<code>Stream</code>发出一个值之前的暴露值。</p><p>默认情况下，<code>StreamProvider</code>认为<code>Stream</code>监听使用的是不可变的数据。因此，如果之前的值和新的值是&#x3D;&#x3D;，它将不会重新构建依赖。</p><p>要改变这种行为，可以传递一个自定义的<code>updateShouldNotify</code>。</p></blockquote><h4 id="FutureProvider"><a href="#FutureProvider" class="headerlink" title="FutureProvider"></a>FutureProvider</h4><p><code>FutureProvider</code>提供了一个初始值<code>initialData</code>，确保不会空值传递，在未来某一时刻子组件会需要用到，子组件可以使用该<code>Future</code>值来告诉子组件使用新的值来进行重建。</p><blockquote><p>⚠️注意：</p><p><code>FutureProvider</code>只会重建一次；</p><p>默认显示初始值；</p><p>然后显示Future值；</p><p>最后不会再次重建。</p></blockquote><blockquote><p>sc.</p><p>async_provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Listens to a [Future] and exposes its result to child and its descendants.</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">It is considered an error to pass a future that can emit errors without</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">providing a catchError method.</span></span></span><br></pre></td></tr></table></figure><p>监听一个<code>Future</code>函数，并且暴露它的结果给子组件。</p><p>在没有提供catchError方法的情况下，传递一个可以发出错误的future，被认为是一个错误。</p></blockquote><h4 id="MultiProvider"><a href="#MultiProvider" class="headerlink" title="MultiProvider"></a>MultiProvider</h4><p>将多个数据提供者合并成一个线性部件树的提供者。它被用来提高可读性，并减少最多层提供者的模板代码。</p><h4 id="ProxyProvider"><a href="#ProxyProvider" class="headerlink" title="ProxyProvider"></a>ProxyProvider</h4><p>当我们有多个数据模型时，会有模型依赖另一个模型的情况，在这种情况下，我们可以使用<code>ProxyProvider</code>从另一个提供者获取值，然后将其注入到另一个提供者中。</p><blockquote><p>sc.</p><p>proxy_provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown"><span class="bullet"> *</span> [Provider], which matches the behavior of [ProxyProvider] but has only</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="code">    a `create` callback.</span></span></span></span><br></pre></td></tr></table></figure><p><code>Provider</code>，它与<code>ProxyProvider</code>的行为一致，但只有一个<code>create</code>回调。</p></blockquote><h4 id="ChangeNotifierProxyProvider"><a href="#ChangeNotifierProxyProvider" class="headerlink" title="ChangeNotifierProxyProvider"></a><a name="target1">ChangeNotifierProxyProvider</a></h4><p>和<code>ProxyProvider</code>原理一样，唯一的区别在于它构建和同步<code>ChangeNotifier</code>的<code>ChangeNotifierProvider</code>，当提供者数据变化时，将会重构UI。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ChangeNotifierProxyProvider&lt;MyModel, MyChangeNotifier&gt;(</span><br><span class="line">  create: (_) =&gt; MyChangeNotifier(),</span><br><span class="line">  update: (_, myModel, myNotifier) =&gt; myNotifier</span><br><span class="line">    ..update(myModel),</span><br><span class="line">  child: ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>rf.</p><p><a href="https://pub.dev/documentation/provider/latest/provider/ChangeNotifierProxyProvider-class.html">https://pub.dev/documentation/provider/latest/provider/ChangeNotifierProxyProvider-class.html</a></p><p>sc.</p><p>change_notifier_provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">  If the created object is only a combination of other objects, without</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">  http calls or similar side-effects, then it is likely that an immutable</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">  object built using [ProxyProvider] will work.</span></span></span><br></pre></td></tr></table></figure><p>如果创建的对象只是其他对象的组合，而不涉及到http调用或类似的副作用，那么使用<code>ProxyProvider</code>构建的不可变的对象很可能会起作用。</p></blockquote><h4 id="ListenableProxyProvider"><a href="#ListenableProxyProvider" class="headerlink" title="ListenableProxyProvider"></a>ListenableProxyProvider</h4><blockquote><p>sc.</p><p>listenable_provider.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">A variation of [ListenableProvider] that builds its value from</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">values obtained from other providers.</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[ChangeNotifierProxyProvider] extends [ListenableProxyProvider] to make it</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">work with [ChangeNotifier], but the behavior stays the same.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">Most of the time you&#x27;ll want to use [ChangeNotifierProxyProvider] instead.</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">But [ListenableProxyProvider] is exposed in case someone wants to use a</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Listenable] implementation other than [ChangeNotifier], such as</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Animation].</span></span></span><br></pre></td></tr></table></figure><p><code>ListenableProvider</code>的一个变体，它从其他提供者获得的值中构建其值。</p><p><a href="#target1">[ChangeNotifierProxyProvider]</a>扩展了<code>ListenableProxyProvider</code>，使其与<code>ChangeNotifier</code>一起工作，但其行为保持不变。</p><p>大多数情况下，会想用<code>ChangeNotifierProxyProvider</code>代替。</p><p>但是<code>ListenableProxyProvider</code>被暴露以备有人想要使用<code>ChangeNotifier</code>以外的<code>Listenable</code>实现，例如<code>Animation</code>。</p></blockquote><p>使用得比较多的是：<code>ChangeNotifierProvider</code>、<code>MultiProvider</code>、<code>ChangeNotifierProxyProvider</code>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;出于好奇，翻看了一下源码以及源码注释文档，文中仅摘取了注释文档部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rf.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liujunmin.com/flutter/provider/provider.html#streamprovider&quot;&gt;Flutter Provider状态管理—八种提供者使用分析&lt;/a&gt; （文中的例子很详细）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000040772369#:~:text=Consumer1%2D6%3A,%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%E3%80%82&quot;&gt;状态管理基本介绍和使用&lt;/a&gt; （对提供者和消费者的简单介绍）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pub.dev/&quot;&gt;pub.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://yexingshusheng.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="flutter" scheme="https://yexingshusheng.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter中对于?、??、??=的理解</title>
    <link href="https://yexingshusheng.com/2022/05/flutter-zhong-dui-yu-de-li-jie.html"/>
    <id>https://yexingshusheng.com/2022/05/flutter-zhong-dui-yu-de-li-jie.html</id>
    <published>2022-05-09T05:59:00.000Z</published>
    <updated>2022-05-09T06:28:00.932Z</updated>
    
    <content type="html"><![CDATA[<p>简单总结：<code>?</code>有取消非空判断的意思；而<code>??</code>、<code>??=</code>则是：不为空则是本值，为空则是其他值。</p><blockquote><p>rf.<br><a href="https://blog.csdn.net/qq_34707150/article/details/123483853">flutter学习笔记之Dart-8 问号、双问号的理解</a></p></blockquote><span id="more"></span><p><code>?</code>有取消非空判断的意思</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> foodList = <span class="keyword">null</span>;  <span class="comment">//有两条报错提示：1.Change &#x27;String&#x27; to &#x27;Null&#x27; type annotation 2.Make &#x27;foodList&#x27; nullable</span></span><br><span class="line"><span class="built_in">Null</span> foodList = <span class="keyword">null</span>;</span><br><span class="line"><span class="built_in">String?</span> foodList = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><code>??</code>由<code>String b = a ?? &quot;c&quot;;</code>的结果可知：如果a的值null，则返回c；如果a的值不为null，则返回a的值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String?</span> a = <span class="keyword">null</span>;</span><br><span class="line"><span class="built_in">String</span> b = a ?? <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=====<span class="subst">$a</span>&quot;</span>);  <span class="comment">//a=====null</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b=====<span class="subst">$b</span>&quot;</span>);  <span class="comment">//b=====c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String?</span> a = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">String</span> b = a ?? <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=====<span class="subst">$a</span>&quot;</span>);  <span class="comment">//a=====b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b=====<span class="subst">$b</span>&quot;</span>);  <span class="comment">//b=====b</span></span><br></pre></td></tr></table></figure><p><code>??=</code>由<code>a ??= &quot;b&quot;;</code>的结果可知：如果a为null，则将b赋值给a；如果a不为null，则返回a的值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String?</span> a = <span class="keyword">null</span>;</span><br><span class="line">a ??= <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=====<span class="subst">$a</span>&quot;</span>);  <span class="comment">//a=====b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String?</span> a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">a ??= <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=====<span class="subst">$a</span>&quot;</span>);  <span class="comment">//a=====a</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单总结：&lt;code&gt;?&lt;/code&gt;有取消非空判断的意思；而&lt;code&gt;??&lt;/code&gt;、&lt;code&gt;??=&lt;/code&gt;则是：不为空则是本值，为空则是其他值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rf.&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_34707150/article/details/123483853&quot;&gt;flutter学习笔记之Dart-8 问号、双问号的理解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://yexingshusheng.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
    <category term="flutter" scheme="https://yexingshusheng.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>物美价廉的时代可能结束了</title>
    <link href="https://yexingshusheng.com/2022/05/wu-mei-jie-lian-de-shi-dai-ke-neng-jie-shu-liao.html"/>
    <id>https://yexingshusheng.com/2022/05/wu-mei-jie-lian-de-shi-dai-ke-neng-jie-shu-liao.html</id>
    <published>2022-05-05T12:19:31.000Z</published>
    <updated>2022-06-05T17:21:01.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>rf.</p><p><a href="https://cn.nytimes.com/business/20220505/pandemic-supply-chains-inflation/">物美价廉的时代可能结束了</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;rf.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.nytimes.com/business/20220505/pandemic-supply-chains-inflation/&quot;&gt;物美价廉的时代可能结束了&lt;/a&gt;&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    
    <category term="202205" scheme="https://yexingshusheng.com/tags/202205/"/>
    
  </entry>
  
</feed>
